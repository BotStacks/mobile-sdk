{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"introduction/","title":"Overview","text":""},{"location":"introduction/#botstacks-kotlin-multiplatform-sdk","title":"BotStacks Kotlin Multiplatform SDK","text":"<p>Delightful chat for your Android apps</p> <p>Try the demo, download BotStacks Android</p> <p> </p>"},{"location":"introduction/#table-of-contents","title":"\ud83d\udcc3 Table of Contents","text":"<ul> <li>Overview</li> <li>Installation</li> <li>Help</li> </ul>"},{"location":"introduction/#overview","title":"\u2728 Overview","text":"<p>This SDK integrates a fully serviced chat experience on the BotStacks platform.</p> <p> </p>"},{"location":"introduction/#installation","title":"\u2699 Installation","text":""},{"location":"introduction/#compose-multiplatform","title":"Compose Multiplatform","text":"<p>Add <code>ai.botstacks:chat-sdk:{version}</code> to your dependencies</p> <pre><code>val commonMain by getting {\n    dependencies {\n        [...]\n+       implementation(\"ai.botstacks:chat-sdk:{version}\")\n        [...]\n    }\n}\n</code></pre>"},{"location":"introduction/#android-only","title":"Android Only","text":"<p>If you are only targeting Android the dependency is:</p> <pre><code>dependencies {\n    [...]\n+   implementation(\"ai.botstacks:chat-sdk-android:{version}\")\n    [...]\n}\n</code></pre> <p> </p>"},{"location":"introduction/#help","title":"\ud83d\ude4b\u200d\u2642\ufe0f Help","text":"<p>If you don't understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please join our Discord server</p> <p>All Content Copyright \u00a9 2023 BotStacks</p>"},{"location":"android/android-getting-started/","title":"Setup","text":""},{"location":"android/android-getting-started/#quick-start","title":"Quick Start","text":"<p>In order to display any of the UI components and access chat data, you must first initialize the SDK and log in as a chat user.</p>"},{"location":"android/android-getting-started/#step-1-initialize-the-sdk","title":"Step 1: Initialize the SDK","text":"<p>In your Application class, call BotStacksChat.shared.setup with your API key. You can obtain your API key from the Botstacks Dashboard. If you don\u2019t yet have one, you can create one for FREE!</p> <p>If you don't have an Application class, create one.</p> <pre><code>class App : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n+       BotStacksChat.shared.setup(\n+           context = this,\n+           apiKey = \"your-api-key\"\n+       )\n    }\n}\n</code></pre> <p>Note, you can optionally delay load and later call <code>BotStacksChat.shared.load</code> to load BotStacks in whatever load sequence you wish.</p> <p>If you'd like Giphy support in your chats, send your Giphy API key during <code>setup</code>.</p> <pre><code>BotStacksChat.shared.setup(\n    context = this,\n    apiKey = \"your_botstacks_api_key\",\n    giphyApiKey = \"your_giphy_api_key\"\n)\n</code></pre>"},{"location":"android/android-getting-started/#step-2-logging-in","title":"Step 2: Logging in","text":"<p>Nearly all functionality is within the context of a chat user. That said, you must first be logged in as a chat user in order to appropriately display the UI components.</p> <p>To log in, call the login function prior to displaying any UI components. Below is an example of How to accomplish this.</p> <pre><code>val composeScope = rememberCoroutineScope()\ncomposeScope.launch {\n    BotStacksChat.shared.login(\n        \"user-identifier\",\n        \"username\"\n    ) // optionally pass displayName and picture\n    if (BotStacksChat.shared.isUserLoggedIn) {\n        // handle logged in state change\n    }\n}\n</code></pre>"},{"location":"android/android-getting-started/#step-3-render-the-ui","title":"Step 3: Render the UI","text":"<p>The BotStacks UI Kit uses Jetpack Compose. You can add it to any <code>NavHost</code> by rendering inside an <code>BotStacksThemeEngine</code> and adding the <code>BotStacksChatController</code>. Customization controls for the Theme Engine are described below.</p> <pre><code>BotStacksThemeEngine {\n    NavHost(navController = navController, startDestination = \"splash\") {\n        val openChat = {\n            navController.navigate(\"chats\")\n        }\n        composable(\"splash\") {\n            Splash(openChat = openChat, openLogin = {\n                navController.navigate(\"login\")\n            })\n        }\n        composable(\"login\") {\n            Login(openChat)\n        }\n\n        composable(\"chats\") {\n           BotStacksChatController(onLogout = { navController.navigate(\"login\") })\n        }\n    }\n}\n</code></pre> <p> </p>"},{"location":"android/android-getting-started/#step-4-push-notifications-firebase-cloud-messaging","title":"Step 4: Push Notifications (Firebase Cloud Messaging)","text":"<p>For push notifications via FCM, just pass your push token to BotStacks</p> <pre><code>BotStacksChat.registerFCMToken(token)\n</code></pre> <p> </p>"},{"location":"android/android-getting-started/#theming","title":"\ud83d\udd8d Theming","text":"<p>You can theme your BotStacks UI kit by modifying the defaults of the <code>BotStacksThemeEngine</code>. The theme supports fonts, colors, assets, and dimensions. Configure it like this:</p> <pre><code>BotStacksThemeEngine(\n    // true or false to force theming one way (default follows system)\n    useDarkTheme = isSystemInDarkTheme(),\n    // color scheme for light mode\n    lightColorScheme = lightBotStacksColors(\n        primary = Purple40,\n        onPrimary = Color.White,\n    ),\n    // color scheme for dark mode\n    darkColorScheme = darkBotStacksColors(\n        primary = Purple80,\n        onPrimary = Color.Black\n    ),\n    // fonts to utilize for Text within components\n    fonts = with(Typography.bodyLarge) {\n        botstacksFonts(\n            body1 = FontStyle(\n                size = fontSize,\n            )\n        )\n    },\n    // assets for empty state and logo (in header)\n    assets = Assets(\n        logo = R.drawable.inappchat_icon,\n        emptyChat = EmptyScreenConfig.Messages(\n            caption = \"No messages yet.\"\n        )\n    ),\n    // shape definitions for components\n    shapes = ShapeDefinitions(\n        small = 4.dp,\n        medium = 10.dp,\n        large = 16.dp\n    )\n) {\n    // content code here (components, Controller)\n}\n</code></pre>"},{"location":"android/android-getting-started/#components-views","title":"Components &amp; Views","text":"<p>We also support direct component usage in your existing applications. Check out or components and views documentation for integrating them.</p>"},{"location":"api/","title":"chat-sdk","text":"<p>//BotStacks Chat SDK</p>"},{"location":"api/#botstacks-chat-sdk","title":"BotStacks Chat SDK","text":""},{"location":"api/#packages","title":"Packages","text":"Name ai.botstacks.sdk ai.botstacks.sdk.state ai.botstacks.sdk.ui ai.botstacks.sdk.ui.components ai.botstacks.sdk.ui.theme ai.botstacks.sdk.ui.views"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/#types","title":"Types","text":"Name Summary BotStacksChat [common]abstract class BotStacksChat BotStacksChatPlatform [common]expect class BotStacksChatPlatform : BotStacksChat[android]@Stableactual class BotStacksChatPlatform : BotStacksChatMain Android entry point for the BotStacks SDK.[ios]@Stableactual class BotStacksChatPlatform : BotStacksChatMain iOS entry point for the BotStacks SDK."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/#functions","title":"Functions","text":"Name Summary BotStacksChatController [common]@Composableexpect fun BotStacksChatController(onLogout: () -&gt; Unit)[android, ios][android, ios]@Composableactual fun BotStacksChatController(onLogout: () -&gt; Unit)Drop in Navigation Controller for a full end-to-end integration of the BotStacksSDK. BotStacksChatViewController [ios]fun BotStacksChatViewController(onLogout: () -&gt; Unit): UIViewControllerfun BotStacksChatViewController(useDarkTheme: Boolean = false, lightColorScheme: Colors? = null, darkColorScheme: Colors? = null, shapes: ShapeDefinitions? = null, assets: Assets? = null, fonts: Fonts? = null, onLogout: () -&gt; Unit): UIViewControllerDrop in Navigation View Controller for a full end-to-end integration of the BotStacksSDK."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-controller/","title":"bot stacks chat controller","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatController</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-controller/#botstackschatcontroller","title":"BotStacksChatController","text":"<p>[common]\\</p> <p>@Composable</p> <p>expect fun BotStacksChatController(onLogout: () -&gt; Unit)</p> <p>[android, ios]\\ [android, ios]\\</p> <p>@Composable</p> <p>actual fun BotStacksChatController(onLogout: () -&gt; Unit)</p> <p>Drop in Navigation Controller for a full end-to-end integration of the BotStacksSDK.</p> <p>All screen navigation is handled internally.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-controller/#parameters","title":"Parameters","text":"<p>android</p> onLogout Callback when a logout is confirmed and completes successfully. Utilize to send users back to your own log in screen. <p>ios</p> onLogout Callback when a logout is confirmed and completes successfully. Utilize to send users back to your own log in screen."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-view-controller/","title":"bot stacks chat view controller","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatViewController</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-view-controller/#botstackschatviewcontroller","title":"BotStacksChatViewController","text":"<p>[ios]\\ fun BotStacksChatViewController(onLogout: () -&gt; Unit): UIViewController</p> <p>fun BotStacksChatViewController(useDarkTheme: Boolean = false, lightColorScheme: Colors? = null, darkColorScheme: Colors? = null, shapes: ShapeDefinitions? = null, assets: Assets? = null, fonts: Fonts? = null, onLogout: () -&gt; Unit): UIViewController</p> <p>Drop in Navigation View Controller for a full end-to-end integration of the BotStacksSDK.</p> <p>All screen navigation is handled internally.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-view-controller/#parameters","title":"Parameters","text":"<p>ios</p> onLogout Callback when a logout is confirmed and completes successfully. Utilize to send users back to your own log in screen."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/%5Bandroid%5D-bot-stacks-chat-controller/","title":"[android] bot stacks chat controller","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/[android]BotStacksChatController</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/%5Bandroid%5D-bot-stacks-chat-controller/#botstackschatcontroller","title":"BotStacksChatController","text":"<p>[android]\\</p> <p>@Composable</p> <p>fun BotStacksChatController(onLogout: () -&gt; Unit)</p> <p>Drop in Navigation Controller for a full end-to-end integration of the BotStacksSDK.</p> <p>All screen navigation is handled internally.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/%5Bandroid%5D-bot-stacks-chat-controller/#parameters","title":"Parameters","text":"<p>android</p> onLogout Callback when a logout is confirmed and completes successfully. Utilize to send users back to your own log in screen."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/%5Bios%5D-bot-stacks-chat-controller/","title":"[ios] bot stacks chat controller","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/[ios]BotStacksChatController</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/%5Bios%5D-bot-stacks-chat-controller/#botstackschatcontroller","title":"BotStacksChatController","text":"<p>[ios]\\ fun BotStacksChatController(onLogout: () -&gt; Unit): UIViewController</p> <p>Drop in Navigation Controller for a full end-to-end integration of the BotStacksSDK.</p> <p>All screen navigation is handled internally.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/%5Bios%5D-bot-stacks-chat-controller/#parameters","title":"Parameters","text":"<p>ios</p> onLogout Callback when a logout is confirmed and completes successfully. Utilize to send users back to your own log in screen."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/#botstackschat","title":"BotStacksChat","text":"<p>abstract class BotStacksChat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/#inheritors","title":"Inheritors","text":"BotStacksChatPlatform"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/#constructors","title":"Constructors","text":"BotStacksChat [common]constructor()"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/#properties","title":"Properties","text":"Name Summary isUserLoggedIn [common]var isUserLoggedIn: BooleanIf a user is currently logged in. loaded [common]var loaded: BooleanWhether or not the SDK has loaded initial data loggingIn [common]var loggingIn: BooleanIf currently logging in a user onLogout [common]var onLogout: () -&gt; Unit?Register a callback for handling log out events"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-bot-stacks-chat/","title":"bot stacks chat","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/BotStacksChat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-bot-stacks-chat/#botstackschat","title":"BotStacksChat","text":"<p>[common]\\ constructor()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/is-user-logged-in/","title":"Is user logged in","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/isUserLoggedIn</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/is-user-logged-in/#isuserloggedin","title":"isUserLoggedIn","text":"<p>[common]\\ var isUserLoggedIn: Boolean</p> <p>If a user is currently logged in.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/loaded/","title":"Loaded","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/loaded</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/loaded/#loaded","title":"loaded","text":"<p>[common]\\ var loaded: Boolean</p> <p>Whether or not the SDK has loaded initial data</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/logging-in/","title":"Logging in","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/loggingIn</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/logging-in/#loggingin","title":"loggingIn","text":"<p>[common]\\ var loggingIn: Boolean</p> <p>If currently logging in a user</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/on-logout/","title":"On logout","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/onLogout</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/on-logout/#onlogout","title":"onLogout","text":"<p>[common]\\ var onLogout: () -&gt; Unit?</p> <p>Register a callback for handling log out events</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/#properties","title":"Properties","text":"Name Summary shared [common]val shared: BotStacksChatPlatform"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/#functions","title":"Functions","text":"Name Summary logout [common]fun logout()logout from BotStacks registerFCMToken [common]fun registerFCMToken(token: String)Register an Firebase Cloud Messaging (FCM) token with our Backend"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/logout/","title":"Logout","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/Companion/logout</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/logout/#logout","title":"logout","text":"<p>[common]\\ fun logout()</p> <p>logout from BotStacks</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/register-f-c-m-token/","title":"Register f c m token","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/Companion/registerFCMToken</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/register-f-c-m-token/#registerfcmtoken","title":"registerFCMToken","text":"<p>[common]\\ fun registerFCMToken(token: String)</p> <p>Register an Firebase Cloud Messaging (FCM) token with our Backend</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/shared/","title":"Shared","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChat/Companion/shared</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat/-companion/shared/#shared","title":"shared","text":"<p>[common]\\ val shared: BotStacksChatPlatform</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/#botstackschatplatform","title":"BotStacksChatPlatform","text":"<p>[common]\\ expect class BotStacksChatPlatform : BotStacksChat</p> <p>[android]\\ @Stable</p> <p>actual class BotStacksChatPlatform : BotStacksChat</p> <p>Main Android entry point for the BotStacks SDK.</p> <p>Setup/initialization is done via setup, while login and log out are done via login and BotStacksChat.logout, respectively.</p> <p>Registering an FCM token for push notification support is done via BotStacksChat.registerFCMToken.</p> <p>[ios]\\ @Stable</p> <p>actual class BotStacksChatPlatform : BotStacksChat</p> <p>Main iOS entry point for the BotStacks SDK.</p> <p>Setup/initialization is done via setup, while login and log out are done via login and BotStacksChat.logout, respectively.</p> <p>Registering an FCM token for push notification support is done via BotStacksChat.registerFCMToken.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/#constructors","title":"Constructors","text":"BotStacksChatPlatform [android, ios]constructor()[common]expect constructor()"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/#properties","title":"Properties","text":"Name Summary apiKey [common, android, ios][common]expect val apiKey: String[android, ios]actual val apiKey: String appIdentifier [common, android, ios][common]expect val appIdentifier: String[android, ios]actual val appIdentifier: String prefs [ios]open val prefs: Settings scope [common, android, ios][common]expect val scope: CoroutineScope[android, ios]actual val scope: CoroutineScope"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/#functions","title":"Functions","text":"Name Summary load [common, ios][common]expect suspend fun load()[ios]actual suspend fun load()[android]actual suspend fun load()Load trigger for loading user data. A logged in check is done during this phase to allow routing to login if needed. login [common, android, ios][common]expect suspend fun login(userId: String, username: String, displayName: String? = null, picture: String? = null)[android, ios]actual suspend fun login(userId: String, username: String, displayName: String?, picture: String?)login to BotStacks Backend setup [ios]fun setup(apiKey: String)fun setup(apiKey: String, giphyApiKey: String?, googleMapsApiKey: String?)fun setup(apiKey: String, giphyApiKey: String?, googleMapsApiKey: String?, delayLoad: Boolean = false)[android]fun setup(context: Context, apiKey: String, giphyApiKey: String? = null, delayLoad: Boolean = false)setup app instance for interfacing with the BotStacksSDK."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/-bot-stacks-chat-platform/","title":"bot stacks chat platform","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform/BotStacksChatPlatform</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/-bot-stacks-chat-platform/#botstackschatplatform","title":"BotStacksChatPlatform","text":"<p>[android, ios, common]\\ [android, ios]\\ constructor()</p> <p>[common]\\ expect constructor()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/api-key/","title":"Api key","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform/apiKey</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/api-key/#apikey","title":"apiKey","text":"<p>[common, android, ios]\\ [common]\\ expect val apiKey: String</p> <p>[android, ios]\\ actual val apiKey: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/app-identifier/","title":"App identifier","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform/appIdentifier</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/app-identifier/#appidentifier","title":"appIdentifier","text":"<p>[common, android, ios]\\ [common]\\ expect val appIdentifier: String</p> <p>[android, ios]\\ actual val appIdentifier: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/load/","title":"Load","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform/load</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/load/#load","title":"load","text":"<p>[common, ios]\\ [common]\\ expect suspend fun load()</p> <p>[ios]\\ actual suspend fun load()</p> <p>[android]\\ actual suspend fun load()</p> <p>Load trigger for loading user data. A logged in check is done during this phase to allow routing to login if needed.</p> <p>NOTE: An apiKey must be provided during setup prior to calling this.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/login/","title":"Login","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform/login</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/login/#login","title":"login","text":"<p>[common, android, ios]\\ [common]\\ expect suspend fun login(userId: String, username: String, displayName: String? = null, picture: String? = null)</p> <p>[android, ios]\\ actual suspend fun login(userId: String, username: String, displayName: String?, picture: String?)</p> <p>login to BotStacks Backend</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/login/#parameters","title":"Parameters","text":"<p>common</p> accessToken BotStacks API key userId userId of user to associate session with username username for user displayName optional display name for user picture optional user image (avatar) URL <p>android</p> accessToken BotStacks API key userId userId of user to associate session with username username for user displayName optional display name for user picture optional user image (avatar) URL <p>ios</p> userId userId of user to associate session with username username for user displayName optional display name for user picture optional user image (avatar) URL"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/prefs/","title":"Prefs","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform/prefs</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/prefs/#prefs","title":"prefs","text":"<p>[ios]\\ open val prefs: Settings</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/scope/","title":"Scope","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform/scope</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/scope/#scope","title":"scope","text":"<p>[common, android, ios]\\ [common]\\ expect val scope: CoroutineScope</p> <p>[android, ios]\\ actual val scope: CoroutineScope</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/setup/","title":"Setup","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk/BotStacksChatPlatform/setup</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/setup/#setup","title":"setup","text":"<p>[android]\\ fun setup(context: Context, apiKey: String, giphyApiKey: String? = null, delayLoad: Boolean = false)</p> <p>setup app instance for interfacing with the BotStacksSDK.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk/-bot-stacks-chat-platform/setup/#parameters","title":"Parameters","text":"<p>android</p> context Application context apiKey BotStacks API key giphyApiKey optional API from Giphy for Gif selection support. delayLoad If enabled, you must call load prior to rendering UI. <p>[ios]\\ fun setup(apiKey: String)</p> <p>fun setup(apiKey: String, giphyApiKey: String?, googleMapsApiKey: String?)</p> <p>fun setup(apiKey: String, giphyApiKey: String?, googleMapsApiKey: String?, delayLoad: Boolean = false)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/#types","title":"Types","text":"Name Summary AttachmentType [common]enum AttachmentType : Enum&lt;AttachmentType&gt; The type of a Message attachment. Currently limited to images and location. ChannelsPager [common]@Stabledata class ChannelsPager(val list: String = \"channels\") : Pager&lt;Chat&gt; Chat [common]@Stableclass Chat(id: String, val kind: ChatType) : Pager&lt;Message&gt; , IdentifiableClass that holds information for a given Chat (Group, DM, etc.) ChatType [common]enum ChatType : Enum&lt;ChatType&gt; The type of a Chat entity. ContactsPager [common]@Stabledata class ContactsPager(val list: String = \"contacts\") : Pager&lt;User&gt; FavoritesPager [common]@Stabledata class FavoritesPager(val list: String = \"favorites\") : Pager&lt;Message&gt; Identifiable [common]interface Identifiable MemberRole [common]enum MemberRole : Enum&lt;MemberRole&gt; The role of a User Member of a Chat Message [common]@Stabledata class Message(val id: String, createdAt: Instant, userID: String, parentID: String?, chatID: String, attachments: SnapshotStateList&lt;MessageAttachment&gt; = mutableStateListOf(), reactions: Reactions = mutableStateListOf()) : IdentifiableA representation of a Message in a given Chat. MessageAttachment [common]data class MessageAttachment(val id: String, val type: AttachmentType, val url: String, val data: String?, val mime: String?, val width: Int?, val height: Int?, val duration: Int?, val address: String?, val latitude: Double?, val longitude: Double?)An attachments that can be included with a Message. NotificationSetting [common]enum NotificationSetting : Enum&lt;NotificationSetting&gt; Notification setting for a user, can be set per chat OnlineStatus [common]enum OnlineStatus : Enum&lt;OnlineStatus&gt; A User's online status in this Chat silo Pager [common]@Stableabstract class Pager&lt;T : Identifiable&gt;(val id: String = uuid(), val items: SnapshotStateList&lt;T&gt; = mutableStateListOf(), val pageSize: Int = 20) Participant [common]@Stabledata class Participant(user_id: String, chat_id: String, created_at: Instant, role: MemberRole)A representation for a participant in a given Chat. RepliesPager [common]@Stabledata class RepliesPager(val message: Message) : Pager&lt;Message&gt; User [common]@Stabledata class User(val id: String) : IdentifiableA representation for a User within BotStacks. UsersPager [common]@Stabledata class UsersPager(val list: String = \"users\") : Pager&lt;User&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/AttachmentType</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/#attachmenttype","title":"AttachmentType","text":"<p>[common]\\ enum AttachmentType : Enum&lt;AttachmentType&gt; </p> <p>The type of a Message attachment. Currently limited to images and location.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/#entries","title":"Entries","text":"Image [common]ImageAn image Location [common]LocationA Location consisting of a combination of Latitude, Longitude and/or Address Unknown [common]Unknown"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/#properties","title":"Properties","text":"Name Summary entries [common]val entries: EnumEntries&lt;AttachmentType&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/#functions","title":"Functions","text":"Name Summary valueOf [common]fun valueOf(value: String): AttachmentTypeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [common]fun values(): Array&lt;AttachmentType&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/entries/","title":"Entries","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/AttachmentType/entries</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/entries/#entries","title":"entries","text":"<p>[common]\\ val entries: EnumEntries&lt;AttachmentType&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/value-of/","title":"Value of","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/AttachmentType/valueOf</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/value-of/#valueof","title":"valueOf","text":"<p>[common]\\ fun valueOf(value: String): AttachmentType</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/values/","title":"Values","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/AttachmentType/values</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/values/#values","title":"values","text":"<p>[common]\\ fun values(): Array&lt;AttachmentType&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/-image/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/AttachmentType/Image</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/-image/#image","title":"Image","text":"<p>[common]\\ Image</p> <p>An image</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/-location/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/AttachmentType/Location</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/-location/#location","title":"Location","text":"<p>[common]\\ Location</p> <p>A Location consisting of a combination of Latitude, Longitude and/or Address</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/-unknown/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/AttachmentType/Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-attachment-type/-unknown/#unknown","title":"Unknown","text":"<p>[common]\\ Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChannelsPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/#channelspager","title":"ChannelsPager","text":"<p>[common]\\ @Stable</p> <p>data class ChannelsPager(val list: String = \"channels\") : Pager&lt;Chat&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/#constructors","title":"Constructors","text":"ChannelsPager [common]constructor(list: String = \"channels\")"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/#properties","title":"Properties","text":"Name Summary list [common]val list: String"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/#functions","title":"Functions","text":"Name Summary load [common]open suspend override fun load(skip: Int, limit: Int): List&lt;Chat&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/-channels-pager/","title":"channels pager","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChannelsPager/ChannelsPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/-channels-pager/#channelspager","title":"ChannelsPager","text":"<p>[common]\\ constructor(list: String = \"channels\")</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/list/","title":"List","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChannelsPager/list</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/list/#list","title":"list","text":"<p>[common]\\ val list: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/load/","title":"Load","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChannelsPager/load</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-channels-pager/load/#load","title":"load","text":"<p>[common]\\ open suspend override fun load(skip: Int, limit: Int): List&lt;Chat&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/#chat","title":"Chat","text":"<p>@Stable</p> <p>class Chat(id: String, val kind: ChatType) : Pager&lt;Message&gt; , Identifiable</p> <p>Class that holds information for a given Chat (Group, DM, etc.)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/#parameters","title":"Parameters","text":"<p>common</p> id The identifier for the Chat kind The kind of Chat"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/#constructors","title":"Constructors","text":"Chat [common]constructor(id: String, kind: ChatType)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/#properties","title":"Properties","text":"Name Summary _private [common]var _private: Boolean admins [common]@Stableval admins: List&lt;Participant&gt; deleting [common]var deleting: Boolean description [common]var description: String? displayDescription [common]val displayDescription: String? displayImage [common]val displayImage: String? displayName [common]val displayName: String editPath [common]val editPath: String friend [common]val friend: User? image [common]var image: String? invitePath [common]val invitePath: String invites [common]val invites: SnapshotStateList&lt;User&gt; inviting [common]var inviting: Boolean isAdmin [common]val isAdmin: Boolean isDM [common]val isDM: Boolean isGroup [common]val isGroup: Boolean isMember [common]val isMember: Boolean isUnread [common]val isUnread: Boolean joining [common]var joining: Boolean kind [common]val kind: ChatType latest [common]var latest: Message? members [common]val members: SnapshotStateList&lt;Participant&gt; membership [common]val membership: Participant? name [common]var name: String? offlineNotAdminUsers [common]@Stableval offlineNotAdminUsers: List&lt;Participant&gt; onlineNotAdminUsers [common]@Stableval onlineNotAdminUsers: List&lt;Participant&gt; path [common]val path: String sending [common]var sending: SnapshotStateList&lt;Message&gt; typingUsers [common]var typingUsers: SnapshotStateList&lt;User&gt; unreadCount [common]var unreadCount: Int updating [common]var updating: Boolean"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/#functions","title":"Functions","text":"Name Summary addMessage [common]fun addMessage(message: Message): Boolean load [common]open suspend override fun load(skip: Int, limit: Int): List&lt;Message&gt; set [common]fun set(notifications: NotificationSetting, isSync: Boolean)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-chat/","title":"chat","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-chat/#chat","title":"Chat","text":"<p>[common]\\ constructor(id: String, kind: ChatType)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-chat/#parameters","title":"Parameters","text":"<p>common</p> id The identifier for the Chat kind The kind of Chat"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/_private/","title":"private","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/_private</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/_private/#_private","title":"_private","text":"<p>[common]\\ var _private: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/add-message/","title":"Add message","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/addMessage</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/add-message/#addmessage","title":"addMessage","text":"<p>[common]\\ fun addMessage(message: Message): Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/admins/","title":"Admins","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/admins</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/admins/#admins","title":"admins","text":"<p>[common]\\</p> <p>@Stable</p> <p>val admins: List&lt;Participant&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/deleting/","title":"Deleting","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/deleting</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/deleting/#deleting","title":"deleting","text":"<p>[common]\\ var deleting: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/description/","title":"Description","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/description</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/description/#description","title":"description","text":"<p>[common]\\ var description: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/display-description/","title":"Display description","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/displayDescription</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/display-description/#displaydescription","title":"displayDescription","text":"<p>[common]\\ val displayDescription: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/display-image/","title":"Display image","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/displayImage</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/display-image/#displayimage","title":"displayImage","text":"<p>[common]\\ val displayImage: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/display-name/","title":"Display name","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/displayName</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/display-name/#displayname","title":"displayName","text":"<p>[common]\\ val displayName: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/edit-path/","title":"Edit path","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/editPath</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/edit-path/#editpath","title":"editPath","text":"<p>[common]\\ val editPath: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/friend/","title":"Friend","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/friend</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/friend/#friend","title":"friend","text":"<p>[common]\\ val friend: User?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/image/","title":"Image","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/image</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/image/#image","title":"image","text":"<p>[common]\\ var image: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/invite-path/","title":"Invite path","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/invitePath</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/invite-path/#invitepath","title":"invitePath","text":"<p>[common]\\ val invitePath: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/invites/","title":"Invites","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/invites</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/invites/#invites","title":"invites","text":"<p>[common]\\ val invites: SnapshotStateList&lt;User&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/inviting/","title":"Inviting","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/inviting</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/inviting/#inviting","title":"inviting","text":"<p>[common]\\ var inviting: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-admin/","title":"Is admin","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/isAdmin</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-admin/#isadmin","title":"isAdmin","text":"<p>[common]\\ val isAdmin: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-d-m/","title":"Is d m","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/isDM</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-d-m/#isdm","title":"isDM","text":"<p>[common]\\ val isDM: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-group/","title":"Is group","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/isGroup</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-group/#isgroup","title":"isGroup","text":"<p>[common]\\ val isGroup: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-member/","title":"Is member","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/isMember</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-member/#ismember","title":"isMember","text":"<p>[common]\\ val isMember: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-unread/","title":"Is unread","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/isUnread</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/is-unread/#isunread","title":"isUnread","text":"<p>[common]\\ val isUnread: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/joining/","title":"Joining","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/joining</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/joining/#joining","title":"joining","text":"<p>[common]\\ var joining: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/kind/","title":"Kind","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/kind</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/kind/#kind","title":"kind","text":"<p>[common]\\ val kind: ChatType</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/kind/#parameters","title":"Parameters","text":"<p>common</p> kind The kind of Chat"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/latest/","title":"Latest","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/latest</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/latest/#latest","title":"latest","text":"<p>[common]\\ var latest: Message?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/load/","title":"Load","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/load</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/load/#load","title":"load","text":"<p>[common]\\ open suspend override fun load(skip: Int, limit: Int): List&lt;Message&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/members/","title":"Members","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/members</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/members/#members","title":"members","text":"<p>[common]\\ val members: SnapshotStateList&lt;Participant&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/membership/","title":"Membership","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/membership</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/membership/#membership","title":"membership","text":"<p>[common]\\ val membership: Participant?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/name/","title":"Name","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/name</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/name/#name","title":"name","text":"<p>[common]\\ var name: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/offline-not-admin-users/","title":"Offline not admin users","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/offlineNotAdminUsers</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/offline-not-admin-users/#offlinenotadminusers","title":"offlineNotAdminUsers","text":"<p>[common]\\</p> <p>@Stable</p> <p>val offlineNotAdminUsers: List&lt;Participant&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/online-not-admin-users/","title":"Online not admin users","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/onlineNotAdminUsers</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/online-not-admin-users/#onlinenotadminusers","title":"onlineNotAdminUsers","text":"<p>[common]\\</p> <p>@Stable</p> <p>val onlineNotAdminUsers: List&lt;Participant&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/path/","title":"Path","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/path</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/path/#path","title":"path","text":"<p>[common]\\ val path: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/sending/","title":"Sending","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/sending</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/sending/#sending","title":"sending","text":"<p>[common]\\ var sending: SnapshotStateList&lt;Message&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/set/","title":"Set","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/set</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/set/#set","title":"set","text":"<p>[common]\\ fun set(notifications: NotificationSetting, isSync: Boolean)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/typing-users/","title":"Typing users","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/typingUsers</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/typing-users/#typingusers","title":"typingUsers","text":"<p>[common]\\ var typingUsers: SnapshotStateList&lt;User&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/unread-count/","title":"Unread count","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/unreadCount</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/unread-count/#unreadcount","title":"unreadCount","text":"<p>[common]\\ var unreadCount: Int</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/updating/","title":"Updating","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/updating</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/updating/#updating","title":"updating","text":"<p>[common]\\ var updating: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/#properties","title":"Properties","text":"Name Summary currentlyViewed [common]var currentlyViewed: String?"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/#functions","title":"Functions","text":"Name Summary get [common]fun get(id: String): Chat? getByUser [common]fun getByUser(id: String): Chat?"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/currently-viewed/","title":"Currently viewed","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/Companion/currentlyViewed</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/currently-viewed/#currentlyviewed","title":"currentlyViewed","text":"<p>[common]\\ var currentlyViewed: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/get-by-user/","title":"Get by user","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/Companion/getByUser</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/get-by-user/#getbyuser","title":"getByUser","text":"<p>[common]\\ fun getByUser(id: String): Chat?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/get/","title":"Get","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Chat/Companion/get</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat/-companion/get/#get","title":"get","text":"<p>[common]\\ fun get(id: String): Chat?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/#chattype","title":"ChatType","text":"<p>[common]\\ enum ChatType : Enum&lt;ChatType&gt; </p> <p>The type of a Chat entity.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/#entries","title":"Entries","text":"DirectMessage [common]DirectMessageA persistent Chat between two users. Group [common]GroupA persistent Chat created for a group of people. Can be branded with a name, description and image, as well as members with MemberRoles Conversation [common]ConversationRepresents an ephemeral Chat. A set of messages spawned around an Support Request or something of the like Thread [common]ThreadRepresents a conversation in reply to a particular message. Does not include nested threads. Unknown [common]Unknown"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/#properties","title":"Properties","text":"Name Summary entries [common]val entries: EnumEntries&lt;ChatType&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/#functions","title":"Functions","text":"Name Summary valueOf [common]fun valueOf(value: String): ChatTypeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [common]fun values(): Array&lt;ChatType&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/entries/","title":"Entries","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType/entries</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/entries/#entries","title":"entries","text":"<p>[common]\\ val entries: EnumEntries&lt;ChatType&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/value-of/","title":"Value of","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType/valueOf</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/value-of/#valueof","title":"valueOf","text":"<p>[common]\\ fun valueOf(value: String): ChatType</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/values/","title":"Values","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType/values</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/values/#values","title":"values","text":"<p>[common]\\ fun values(): Array&lt;ChatType&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-conversation/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType/Conversation</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-conversation/#conversation","title":"Conversation","text":"<p>[common]\\ Conversation</p> <p>Represents an ephemeral Chat. A set of messages spawned around an Support Request or something of the like</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-direct-message/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType/DirectMessage</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-direct-message/#directmessage","title":"DirectMessage","text":"<p>[common]\\ DirectMessage</p> <p>A persistent Chat between two users.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-group/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType/Group</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-group/#group","title":"Group","text":"<p>[common]\\ Group</p> <p>A persistent Chat created for a group of people. Can be branded with a name, description and image, as well as members with MemberRoles</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-thread/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType/Thread</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-thread/#thread","title":"Thread","text":"<p>[common]\\ Thread</p> <p>Represents a conversation in reply to a particular message. Does not include nested threads.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-unknown/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ChatType/Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-chat-type/-unknown/#unknown","title":"Unknown","text":"<p>[common]\\ Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ContactsPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/#contactspager","title":"ContactsPager","text":"<p>[common]\\ @Stable</p> <p>data class ContactsPager(val list: String = \"contacts\") : Pager&lt;User&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/#constructors","title":"Constructors","text":"ContactsPager [common]constructor(list: String = \"contacts\")"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/#properties","title":"Properties","text":"Name Summary contacts [common]var contacts: SnapshotStateList&lt;String&gt; list [common]val list: String requestContacts [common]var requestContacts: Boolean"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/#functions","title":"Functions","text":"Name Summary fetchContacts [common]fun fetchContacts(): List&lt;String&gt; load [common]open suspend override fun load(skip: Int, limit: Int): List&lt;User&gt; syncContacts [common]fun syncContacts()"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/-contacts-pager/","title":"contacts pager","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ContactsPager/ContactsPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/-contacts-pager/#contactspager","title":"ContactsPager","text":"<p>[common]\\ constructor(list: String = \"contacts\")</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/contacts/","title":"Contacts","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ContactsPager/contacts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/contacts/#contacts","title":"contacts","text":"<p>[common]\\ var contacts: SnapshotStateList&lt;String&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/fetch-contacts/","title":"Fetch contacts","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ContactsPager/fetchContacts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/fetch-contacts/#fetchcontacts","title":"fetchContacts","text":"<p>[common]\\ fun fetchContacts(): List&lt;String&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/list/","title":"List","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ContactsPager/list</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/list/#list","title":"list","text":"<p>[common]\\ val list: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/load/","title":"Load","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ContactsPager/load</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/load/#load","title":"load","text":"<p>[common]\\ open suspend override fun load(skip: Int, limit: Int): List&lt;User&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/request-contacts/","title":"Request contacts","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ContactsPager/requestContacts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/request-contacts/#requestcontacts","title":"requestContacts","text":"<p>[common]\\ var requestContacts: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/sync-contacts/","title":"Sync contacts","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/ContactsPager/syncContacts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-contacts-pager/sync-contacts/#synccontacts","title":"syncContacts","text":"<p>[common]\\ fun syncContacts()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/FavoritesPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/#favoritespager","title":"FavoritesPager","text":"<p>[common]\\ @Stable</p> <p>data class FavoritesPager(val list: String = \"favorites\") : Pager&lt;Message&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/#constructors","title":"Constructors","text":"FavoritesPager [common]constructor(list: String = \"favorites\")"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/#properties","title":"Properties","text":"Name Summary list [common]val list: String"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/#functions","title":"Functions","text":"Name Summary load [common]open suspend override fun load(skip: Int, limit: Int): List&lt;Message&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/-favorites-pager/","title":"favorites pager","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/FavoritesPager/FavoritesPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/-favorites-pager/#favoritespager","title":"FavoritesPager","text":"<p>[common]\\ constructor(list: String = \"favorites\")</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/list/","title":"List","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/FavoritesPager/list</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/list/#list","title":"list","text":"<p>[common]\\ val list: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/load/","title":"Load","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/FavoritesPager/load</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-favorites-pager/load/#load","title":"load","text":"<p>[common]\\ open suspend override fun load(skip: Int, limit: Int): List&lt;Message&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-identifiable/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Identifiable</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-identifiable/#identifiable","title":"Identifiable","text":"<p>interface Identifiable</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-identifiable/#inheritors","title":"Inheritors","text":"Chat Message User"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-identifiable/#properties","title":"Properties","text":"Name Summary id [common]abstract val id: String"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-identifiable/id/","title":"Id","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Identifiable/id</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-identifiable/id/#id","title":"id","text":"<p>[common]\\ abstract val id: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/#memberrole","title":"MemberRole","text":"<p>[common]\\ enum MemberRole : Enum&lt;MemberRole&gt; </p> <p>The role of a User Member of a Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/#entries","title":"Entries","text":"Owner [common]OwnerAn Owner, has total permisisonal control over a Chat Admin [common]AdminAn Admin, has near total permissional control over a Chat Member [common]MemberA member can send Messages and read Messages from a Chat Invited [common]InvitedAn Invite sent to a User for a Chat. The User can join the Chat if invited, even if the Chat is private RejectedInvite [common]RejectedInviteA User that rejected an Invite to a Chat. Retained in order to prevent multiple Invites Kicked [common]KickedA User that was kicked from a group Chat. Retained in order to prevent the User rejoining the Chat. Unknown [common]Unknown"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/#properties","title":"Properties","text":"Name Summary entries [common]val entries: EnumEntries&lt;MemberRole&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/#functions","title":"Functions","text":"Name Summary valueOf [common]fun valueOf(value: String): MemberRoleReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [common]fun values(): Array&lt;MemberRole&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/entries/","title":"Entries","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/entries</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/entries/#entries","title":"entries","text":"<p>[common]\\ val entries: EnumEntries&lt;MemberRole&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/value-of/","title":"Value of","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/valueOf</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/value-of/#valueof","title":"valueOf","text":"<p>[common]\\ fun valueOf(value: String): MemberRole</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/values/","title":"Values","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/values</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/values/#values","title":"values","text":"<p>[common]\\ fun values(): Array&lt;MemberRole&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-admin/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/Admin</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-admin/#admin","title":"Admin","text":"<p>[common]\\ Admin</p> <p>An Admin, has near total permissional control over a Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-invited/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/Invited</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-invited/#invited","title":"Invited","text":"<p>[common]\\ Invited</p> <p>An Invite sent to a User for a Chat. The User can join the Chat if invited, even if the Chat is private</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-kicked/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/Kicked</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-kicked/#kicked","title":"Kicked","text":"<p>[common]\\ Kicked</p> <p>A User that was kicked from a group Chat. Retained in order to prevent the User rejoining the Chat.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-member/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/Member</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-member/#member","title":"Member","text":"<p>[common]\\ Member</p> <p>A member can send Messages and read Messages from a Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-owner/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/Owner</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-owner/#owner","title":"Owner","text":"<p>[common]\\ Owner</p> <p>An Owner, has total permisisonal control over a Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-rejected-invite/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/RejectedInvite</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-rejected-invite/#rejectedinvite","title":"RejectedInvite","text":"<p>[common]\\ RejectedInvite</p> <p>A User that rejected an Invite to a Chat. Retained in order to prevent multiple Invites</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-unknown/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MemberRole/Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-member-role/-unknown/#unknown","title":"Unknown","text":"<p>[common]\\ Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/#message","title":"Message","text":"<p>[common]\\ @Stable</p> <p>data class Message(val id: String, createdAt: Instant, userID: String, parentID: String?, chatID: String, attachments: SnapshotStateList&lt;MessageAttachment&gt; = mutableStateListOf(), reactions: Reactions = mutableStateListOf()) : Identifiable</p> <p>A representation of a Message in a given Chat.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/#constructors","title":"Constructors","text":"Message [common]constructor(id: String, createdAt: Instant, userID: String, parentID: String?, chatID: String, attachments: SnapshotStateList&lt;MessageAttachment&gt; = mutableStateListOf(), reactions: Reactions = mutableStateListOf())"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/#properties","title":"Properties","text":"Name Summary chat [common]val chat: Chat currentReaction [common]var currentReaction: String? editingText [common]var editingText: Boolean failed [common]var failed: Boolean favorite [common]var favorite: Boolean favoriting [common]var favoriting: Boolean id [common]open override val id: String isGroup [common]val isGroup: Boolean isSending [common]var isSending: Boolean markdown [common]var markdown: String msg [common]val msg: String parent [common]var parent: Message? path [common]val path: String reacting [common]var reacting: Boolean replies [common]val replies: RepliesPager replyCount [common]var replyCount: Int text [common]var text: String user [common]val user: User"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/#functions","title":"Functions","text":"Name Summary updateText [common]fun updateText(text: String)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/-message/","title":"message","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/Message</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/-message/#message","title":"Message","text":"<p>[common]\\ constructor(id: String, createdAt: Instant, userID: String, parentID: String?, chatID: String, attachments: SnapshotStateList&lt;MessageAttachment&gt; = mutableStateListOf(), reactions: Reactions = mutableStateListOf())</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/chat/","title":"Chat","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/chat/#chat","title":"chat","text":"<p>[common]\\ val chat: Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/current-reaction/","title":"Current reaction","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/currentReaction</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/current-reaction/#currentreaction","title":"currentReaction","text":"<p>[common]\\ var currentReaction: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/editing-text/","title":"Editing text","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/editingText</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/editing-text/#editingtext","title":"editingText","text":"<p>[common]\\ var editingText: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/failed/","title":"Failed","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/failed</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/failed/#failed","title":"failed","text":"<p>[common]\\ var failed: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/favorite/","title":"Favorite","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/favorite</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/favorite/#favorite","title":"favorite","text":"<p>[common]\\ var favorite: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/favoriting/","title":"Favoriting","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/favoriting</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/favoriting/#favoriting","title":"favoriting","text":"<p>[common]\\ var favoriting: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/id/","title":"Id","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/id</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/id/#id","title":"id","text":"<p>[common]\\ open override val id: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/is-group/","title":"Is group","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/isGroup</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/is-group/#isgroup","title":"isGroup","text":"<p>[common]\\ val isGroup: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/is-sending/","title":"Is sending","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/isSending</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/is-sending/#issending","title":"isSending","text":"<p>[common]\\ var isSending: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/markdown/","title":"Markdown","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/markdown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/markdown/#markdown","title":"markdown","text":"<p>[common]\\ var markdown: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/msg/","title":"Msg","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/msg</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/msg/#msg","title":"msg","text":"<p>[common]\\ val msg: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/parent/","title":"Parent","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/parent</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/parent/#parent","title":"parent","text":"<p>[common]\\ var parent: Message?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/path/","title":"Path","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/path</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/path/#path","title":"path","text":"<p>[common]\\ val path: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/reacting/","title":"Reacting","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/reacting</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/reacting/#reacting","title":"reacting","text":"<p>[common]\\ var reacting: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/replies/","title":"Replies","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/replies</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/replies/#replies","title":"replies","text":"<p>[common]\\ val replies: RepliesPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/reply-count/","title":"Reply count","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/replyCount</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/reply-count/#replycount","title":"replyCount","text":"<p>[common]\\ var replyCount: Int</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/text/","title":"Text","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/text</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/text/#text","title":"text","text":"<p>[common]\\ var text: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/update-text/","title":"Update text","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/updateText</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/update-text/#updatetext","title":"updateText","text":"<p>[common]\\ fun updateText(text: String)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/user/","title":"User","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/user</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/user/#user","title":"user","text":"<p>[common]\\ val user: User</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/-companion/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Message/Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/#messageattachment","title":"MessageAttachment","text":"<p>[common]\\ data class MessageAttachment(val id: String, val type: AttachmentType, val url: String, val data: String?, val mime: String?, val width: Int?, val height: Int?, val duration: Int?, val address: String?, val latitude: Double?, val longitude: Double?)</p> <p>An attachments that can be included with a Message.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/#constructors","title":"Constructors","text":"MessageAttachment [common]constructor(id: String, type: AttachmentType, url: String, data: String?, mime: String?, width: Int?, height: Int?, duration: Int?, address: String?, latitude: Double?, longitude: Double?)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/#properties","title":"Properties","text":"Name Summary address [common]val address: String?The address of the location data [common]val data: String?The raw data of the Attachment if it is a VCard duration [common]val duration: Int?The duration of the audio or video in seconds height [common]val height: Int?The height of the image or video in integer pixels id [common]val id: StringThe ID of the Attachment latitude [common]val latitude: Double?The latitude of the location longitude [common]val longitude: Double?The longitude of the location mime [common]val mime: String?The mime type of the attachment if it is a file, image, video or audio object type [common]val type: AttachmentTypeThe type of the Attachment url [common]val url: StringThe url of the file or 'data' if an arbitrary object width [common]val width: Int?The width of the image or video in integer pixels"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/-message-attachment/","title":"message attachment","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/MessageAttachment</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/-message-attachment/#messageattachment","title":"MessageAttachment","text":"<p>[common]\\ constructor(id: String, type: AttachmentType, url: String, data: String?, mime: String?, width: Int?, height: Int?, duration: Int?, address: String?, latitude: Double?, longitude: Double?)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/address/","title":"Address","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/address</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/address/#address","title":"address","text":"<p>[common]\\ val address: String?</p> <p>The address of the location</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/data/","title":"Data","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/data</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/data/#data","title":"data","text":"<p>[common]\\ val data: String?</p> <p>The raw data of the Attachment if it is a VCard</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/duration/","title":"Duration","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/duration</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/duration/#duration","title":"duration","text":"<p>[common]\\ val duration: Int?</p> <p>The duration of the audio or video in seconds</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/height/","title":"Height","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/height</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/height/#height","title":"height","text":"<p>[common]\\ val height: Int?</p> <p>The height of the image or video in integer pixels</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/id/","title":"Id","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/id</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/id/#id","title":"id","text":"<p>[common]\\ val id: String</p> <p>The ID of the Attachment</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/latitude/","title":"Latitude","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/latitude</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/latitude/#latitude","title":"latitude","text":"<p>[common]\\ val latitude: Double?</p> <p>The latitude of the location</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/longitude/","title":"Longitude","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/longitude</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/longitude/#longitude","title":"longitude","text":"<p>[common]\\ val longitude: Double?</p> <p>The longitude of the location</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/mime/","title":"Mime","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/mime</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/mime/#mime","title":"mime","text":"<p>[common]\\ val mime: String?</p> <p>The mime type of the attachment if it is a file, image, video or audio object</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/type/","title":"Type","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/type</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/type/#type","title":"type","text":"<p>[common]\\ val type: AttachmentType</p> <p>The type of the Attachment</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/url/","title":"Url","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/url</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/url/#url","title":"url","text":"<p>[common]\\ val url: String</p> <p>The url of the file or 'data' if an arbitrary object</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/width/","title":"Width","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/MessageAttachment/width</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-message-attachment/width/#width","title":"width","text":"<p>[common]\\ val width: Int?</p> <p>The width of the image or video in integer pixels</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/NotificationSetting</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/#notificationsetting","title":"NotificationSetting","text":"<p>[common]\\ enum NotificationSetting : Enum&lt;NotificationSetting&gt; </p> <p>Notification setting for a user, can be set per chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/#entries","title":"Entries","text":"All [common]AllAllow all notifications, mentions and dms Mentions [common]MentionsAllow only mention notifictions None [common]NoneNo notifications Unknown [common]UnknownAuto generated constant for unknown enum values"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/#properties","title":"Properties","text":"Name Summary entries [common]val entries: EnumEntries&lt;NotificationSetting&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/#functions","title":"Functions","text":"Name Summary valueOf [common]fun valueOf(value: String): NotificationSettingReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [common]fun values(): Array&lt;NotificationSetting&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/entries/","title":"Entries","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/NotificationSetting/entries</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/entries/#entries","title":"entries","text":"<p>[common]\\ val entries: EnumEntries&lt;NotificationSetting&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/value-of/","title":"Value of","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/NotificationSetting/valueOf</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/value-of/#valueof","title":"valueOf","text":"<p>[common]\\ fun valueOf(value: String): NotificationSetting</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/values/","title":"Values","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/NotificationSetting/values</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/values/#values","title":"values","text":"<p>[common]\\ fun values(): Array&lt;NotificationSetting&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/-all/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/NotificationSetting/All</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/-all/#all","title":"All","text":"<p>[common]\\ All</p> <p>Allow all notifications, mentions and dms</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/-mentions/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/NotificationSetting/Mentions</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/-mentions/#mentions","title":"Mentions","text":"<p>[common]\\ Mentions</p> <p>Allow only mention notifictions</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/-none/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/NotificationSetting/None</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/-none/#none","title":"None","text":"<p>[common]\\ None</p> <p>No notifications</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/-unknown/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/NotificationSetting/Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-notification-setting/-unknown/#unknown","title":"Unknown","text":"<p>[common]\\ Unknown</p> <p>Auto generated constant for unknown enum values</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/#onlinestatus","title":"OnlineStatus","text":"<p>[common]\\ enum OnlineStatus : Enum&lt;OnlineStatus&gt; </p> <p>A User's online status in this Chat silo</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/#entries","title":"Entries","text":"Online [common]OnlineActively available. The suggests a near immediate response Offline [common]OfflineThe user is not connected to the network. This suggests an entirely random response time Away [common]AwayA user that is connected to the network but is \"Away\". This suggests a likely response in the near future DND [common]DNDA user that has explicitely marked their Chat availbility as Do Not Disturb. The user is actively connected to the network and would like his peers to know he is connect4ed, but does not wish to receive any messages. Unknown [common]Unknown"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/#properties","title":"Properties","text":"Name Summary entries [common]val entries: EnumEntries&lt;OnlineStatus&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/#functions","title":"Functions","text":"Name Summary valueOf [common]fun valueOf(value: String): OnlineStatusReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [common]fun values(): Array&lt;OnlineStatus&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/entries/","title":"Entries","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus/entries</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/entries/#entries","title":"entries","text":"<p>[common]\\ val entries: EnumEntries&lt;OnlineStatus&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/value-of/","title":"Value of","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus/valueOf</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/value-of/#valueof","title":"valueOf","text":"<p>[common]\\ fun valueOf(value: String): OnlineStatus</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/values/","title":"Values","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus/values</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/values/#values","title":"values","text":"<p>[common]\\ fun values(): Array&lt;OnlineStatus&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-away/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus/Away</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-away/#away","title":"Away","text":"<p>[common]\\ Away</p> <p>A user that is connected to the network but is \"Away\". This suggests a likely response in the near future</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-d-n-d/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus/DND</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-d-n-d/#dnd","title":"DND","text":"<p>[common]\\ DND</p> <p>A user that has explicitely marked their Chat availbility as Do Not Disturb. The user is actively connected to the network and would like his peers to know he is connect4ed, but does not wish to receive any messages.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-offline/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus/Offline</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-offline/#offline","title":"Offline","text":"<p>[common]\\ Offline</p> <p>The user is not connected to the network. This suggests an entirely random response time</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-online/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus/Online</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-online/#online","title":"Online","text":"<p>[common]\\ Online</p> <p>Actively available. The suggests a near immediate response</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-unknown/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/OnlineStatus/Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-online-status/-unknown/#unknown","title":"Unknown","text":"<p>[common]\\ Unknown</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/#pager","title":"Pager","text":"<p>@Stable</p> <p>abstract class Pager&lt;T : Identifiable&gt;(val id: String = uuid(), val items: SnapshotStateList&lt;T&gt; = mutableStateListOf(), val pageSize: Int = 20)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/#inheritors","title":"Inheritors","text":"Chat ChannelsPager UsersPager ContactsPager FavoritesPager RepliesPager"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/#constructors","title":"Constructors","text":"Pager [common]constructor(id: String = uuid(), items: SnapshotStateList&lt;T&gt; = mutableStateListOf(), pageSize: Int = 20)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/#properties","title":"Properties","text":"Name Summary hasMore [common]var hasMore: Boolean id [common]val id: String isSinglePage [common]open val isSinglePage: Boolean items [common]val items: SnapshotStateList&lt;T&gt; loading [common]var loading: Boolean pageSize [common]val pageSize: Int = 20 refreshing [common]var refreshing: Boolean"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/#functions","title":"Functions","text":"Name Summary load [common]abstract suspend fun load(skip: Int, limit: Int): List&lt;T&gt; loadMore [common]fun loadMore() loadMoreIfEmpty [common]fun loadMoreIfEmpty() loadMoreIfNeeded [common]fun loadMoreIfNeeded(item: T) refresh [common]fun refresh() skip [common]fun skip(isRefresh: Boolean): Int"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/-pager/","title":"pager","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/Pager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/-pager/#pager","title":"Pager","text":"<p>[common]\\ constructor(id: String = uuid(), items: SnapshotStateList&lt;T&gt; = mutableStateListOf(), pageSize: Int = 20)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/has-more/","title":"Has more","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/hasMore</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/has-more/#hasmore","title":"hasMore","text":"<p>[common]\\ var hasMore: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/id/","title":"Id","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/id</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/id/#id","title":"id","text":"<p>[common]\\ val id: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/is-single-page/","title":"Is single page","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/isSinglePage</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/is-single-page/#issinglepage","title":"isSinglePage","text":"<p>[common]\\ open val isSinglePage: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/items/","title":"Items","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/items</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/items/#items","title":"items","text":"<p>[common]\\ val items: SnapshotStateList&lt;T&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/load-more-if-empty/","title":"Load more if empty","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/loadMoreIfEmpty</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/load-more-if-empty/#loadmoreifempty","title":"loadMoreIfEmpty","text":"<p>[common]\\ fun loadMoreIfEmpty()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/load-more-if-needed/","title":"Load more if needed","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/loadMoreIfNeeded</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/load-more-if-needed/#loadmoreifneeded","title":"loadMoreIfNeeded","text":"<p>[common]\\ fun loadMoreIfNeeded(item: T)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/load-more/","title":"Load more","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/loadMore</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/load-more/#loadmore","title":"loadMore","text":"<p>[common]\\ fun loadMore()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/load/","title":"Load","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/load</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/load/#load","title":"load","text":"<p>[common]\\ abstract suspend fun load(skip: Int, limit: Int): List&lt;T&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/loading/","title":"Loading","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/loading</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/loading/#loading","title":"loading","text":"<p>[common]\\ var loading: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/page-size/","title":"Page size","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/pageSize</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/page-size/#pagesize","title":"pageSize","text":"<p>[common]\\ val pageSize: Int = 20</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/refresh/","title":"Refresh","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/refresh</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/refresh/#refresh","title":"refresh","text":"<p>[common]\\ fun refresh()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/refreshing/","title":"Refreshing","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/refreshing</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/refreshing/#refreshing","title":"refreshing","text":"<p>[common]\\ var refreshing: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/skip/","title":"Skip","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Pager/skip</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-pager/skip/#skip","title":"skip","text":"<p>[common]\\ fun skip(isRefresh: Boolean): Int</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Participant</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/#participant","title":"Participant","text":"<p>[common]\\ @Stable</p> <p>data class Participant(user_id: String, chat_id: String, created_at: Instant, role: MemberRole)</p> <p>A representation for a participant in a given Chat.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/#constructors","title":"Constructors","text":"Participant [common]constructor(user_id: String, chat_id: String, created_at: Instant, role: MemberRole)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/#properties","title":"Properties","text":"Name Summary chat [common]val chat: ChatThe Chat for this Participant isAdmin [common]val isAdmin: BooleanWhether this participant is currently an admin of the corresponding Chat isMember [common]val isMember: BooleanWhether this participant is currently an active member of the corresponding Chat user [common]val user: UserThe User representation for the Participant"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/-participant/","title":"participant","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Participant/Participant</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/-participant/#participant","title":"Participant","text":"<p>[common]\\ constructor(user_id: String, chat_id: String, created_at: Instant, role: MemberRole)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/chat/","title":"Chat","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Participant/chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/chat/#chat","title":"chat","text":"<p>[common]\\ val chat: Chat</p> <p>The Chat for this Participant</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/is-admin/","title":"Is admin","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Participant/isAdmin</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/is-admin/#isadmin","title":"isAdmin","text":"<p>[common]\\ val isAdmin: Boolean</p> <p>Whether this participant is currently an admin of the corresponding Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/is-member/","title":"Is member","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Participant/isMember</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/is-member/#ismember","title":"isMember","text":"<p>[common]\\ val isMember: Boolean</p> <p>Whether this participant is currently an active member of the corresponding Chat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/user/","title":"User","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Participant/user</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/user/#user","title":"user","text":"<p>[common]\\ val user: User</p> <p>The User representation for the Participant</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/-companion/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/Participant/Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-participant/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/RepliesPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/#repliespager","title":"RepliesPager","text":"<p>[common]\\ @Stable</p> <p>data class RepliesPager(val message: Message) : Pager&lt;Message&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/#constructors","title":"Constructors","text":"RepliesPager [common]constructor(message: Message)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/#properties","title":"Properties","text":"Name Summary message [common]val message: Message"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/#functions","title":"Functions","text":"Name Summary load [common]open suspend override fun load(skip: Int, limit: Int): List&lt;Message&gt; setReplies [common]fun setReplies(list: List&lt;Message&gt;)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/-replies-pager/","title":"replies pager","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/RepliesPager/RepliesPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/-replies-pager/#repliespager","title":"RepliesPager","text":"<p>[common]\\ constructor(message: Message)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/load/","title":"Load","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/RepliesPager/load</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/load/#load","title":"load","text":"<p>[common]\\ open suspend override fun load(skip: Int, limit: Int): List&lt;Message&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/message/","title":"Message","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/RepliesPager/message</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/message/#message","title":"message","text":"<p>[common]\\ val message: Message</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/set-replies/","title":"Set replies","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/RepliesPager/setReplies</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-replies-pager/set-replies/#setreplies","title":"setReplies","text":"<p>[common]\\ fun setReplies(list: List&lt;Message&gt;)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/#user","title":"User","text":"<p>[common]\\ @Stable</p> <p>data class User(val id: String) : Identifiable</p> <p>A representation for a User within BotStacks.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/#constructors","title":"Constructors","text":"User [common]constructor(id: String)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/#types","title":"Types","text":"Name Summary Companion [common]@Stableobject Companion"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/#properties","title":"Properties","text":"Name Summary avatar [common]var avatar: String? blocked [common]var blocked: Boolean blocking [common]var blocking: Boolean channelsInCommon [common]val channelsInCommon: List&lt;Chat&gt; chatPath [common]val chatPath: String description [common]var description: String? displayName [common]var displayName: String? displayNameFb [common]@Stableval displayNameFb: String haveChatWith [common]@Stableval haveChatWith: Boolean haveContact [common]var haveContact: Boolean id [common]open override val id: String isCurrent [common]@Stableval isCurrent: Boolean lastSeen [common]var lastSeen: Instant? muted [common]var muted: Boolean path [common]val path: String status [common]var status: OnlineStatus statusMessage [common]var statusMessage: String? togglingMute [common]var togglingMute: Boolean username [common]var username: String"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/-user/","title":"user","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/User</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/-user/#user","title":"User","text":"<p>[common]\\ constructor(id: String)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/avatar/","title":"Avatar","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/avatar</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/avatar/#avatar","title":"avatar","text":"<p>[common]\\ var avatar: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/blocked/","title":"Blocked","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/blocked</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/blocked/#blocked","title":"blocked","text":"<p>[common]\\ var blocked: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/blocking/","title":"Blocking","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/blocking</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/blocking/#blocking","title":"blocking","text":"<p>[common]\\ var blocking: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/channels-in-common/","title":"Channels in common","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/channelsInCommon</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/channels-in-common/#channelsincommon","title":"channelsInCommon","text":"<p>[common]\\ val channelsInCommon: List&lt;Chat&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/chat-path/","title":"Chat path","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/chatPath</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/chat-path/#chatpath","title":"chatPath","text":"<p>[common]\\ val chatPath: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/description/","title":"Description","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/description</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/description/#description","title":"description","text":"<p>[common]\\ var description: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/display-name-fb/","title":"Display name fb","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/displayNameFb</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/display-name-fb/#displaynamefb","title":"displayNameFb","text":"<p>[common]\\</p> <p>@Stable</p> <p>val displayNameFb: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/display-name/","title":"Display name","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/displayName</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/display-name/#displayname","title":"displayName","text":"<p>[common]\\ var displayName: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/have-chat-with/","title":"Have chat with","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/haveChatWith</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/have-chat-with/#havechatwith","title":"haveChatWith","text":"<p>[common]\\</p> <p>@Stable</p> <p>val haveChatWith: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/have-contact/","title":"Have contact","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/haveContact</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/have-contact/#havecontact","title":"haveContact","text":"<p>[common]\\ var haveContact: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/id/","title":"Id","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/id</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/id/#id","title":"id","text":"<p>[common]\\ open override val id: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/is-current/","title":"Is current","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/isCurrent</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/is-current/#iscurrent","title":"isCurrent","text":"<p>[common]\\</p> <p>@Stable</p> <p>val isCurrent: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/last-seen/","title":"Last seen","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/lastSeen</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/last-seen/#lastseen","title":"lastSeen","text":"<p>[common]\\ var lastSeen: Instant?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/muted/","title":"Muted","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/muted</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/muted/#muted","title":"muted","text":"<p>[common]\\ var muted: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/path/","title":"Path","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/path</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/path/#path","title":"path","text":"<p>[common]\\ val path: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/status-message/","title":"Status message","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/statusMessage</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/status-message/#statusmessage","title":"statusMessage","text":"<p>[common]\\ var statusMessage: String?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/status/","title":"Status","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/status</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/status/#status","title":"status","text":"<p>[common]\\ var status: OnlineStatus</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/toggling-mute/","title":"Toggling mute","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/togglingMute</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/toggling-mute/#togglingmute","title":"togglingMute","text":"<p>[common]\\ var togglingMute: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/username/","title":"Username","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/username</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/username/#username","title":"username","text":"<p>[common]\\ var username: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/-companion/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/User/Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-user/-companion/#companion","title":"Companion","text":"<p>[common]\\ @Stable</p> <p>object Companion</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/UsersPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/#userspager","title":"UsersPager","text":"<p>[common]\\ @Stable</p> <p>data class UsersPager(val list: String = \"users\") : Pager&lt;User&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/#constructors","title":"Constructors","text":"UsersPager [common]constructor(list: String = \"users\")"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/#properties","title":"Properties","text":"Name Summary list [common]val list: String"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/#functions","title":"Functions","text":"Name Summary load [common]open suspend override fun load(skip: Int, limit: Int): List&lt;User&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/-users-pager/","title":"users pager","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/UsersPager/UsersPager</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/-users-pager/#userspager","title":"UsersPager","text":"<p>[common]\\ constructor(list: String = \"users\")</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/list/","title":"List","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/UsersPager/list</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/list/#list","title":"list","text":"<p>[common]\\ val list: String</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/load/","title":"Load","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.state/UsersPager/load</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.state/-users-pager/load/#load","title":"load","text":"<p>[common]\\ open suspend override fun load(skip: Int, limit: Int): List&lt;User&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/#types","title":"Types","text":"Name Summary BotStacks [common]object BotStacksCompose composition access to the various theme controls set in BotStacksThemeEngine"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/#functions","title":"Functions","text":"Name Summary BotStacksThemeEngine [common]@Composablefun BotStacksThemeEngine(useDarkTheme: Boolean = isSystemInDarkTheme(), lightColorScheme: Colors = LocalBotStacksDayNightColorScheme.current.day, darkColorScheme: Colors = LocalBotStacksDayNightColorScheme.current.night, shapes: ShapeDefinitions? = null, assets: Assets? = null, fonts: Fonts? = null, content: @Composable() -&gt; Unit)The Theme Engine that drives BotStacks UI."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks-theme-engine/","title":"bot stacks theme engine","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui/BotStacksThemeEngine</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks-theme-engine/#botstacksthemeengine","title":"BotStacksThemeEngine","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun BotStacksThemeEngine(useDarkTheme: Boolean = isSystemInDarkTheme(), lightColorScheme: Colors = LocalBotStacksDayNightColorScheme.current.day, darkColorScheme: Colors = LocalBotStacksDayNightColorScheme.current.night, shapes: ShapeDefinitions? = null, assets: Assets? = null, fonts: Fonts? = null, content: @Composable() -&gt; Unit)</p> <p>The Theme Engine that drives BotStacks UI.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks-theme-engine/#parameters","title":"Parameters","text":"<p>common</p> useDarkTheme Whether to use the dark theme supplied in darkColorScheme. This defaults to the system setting for Light vs. Dark and respects Auto settings. lightColorScheme The Colors to utilize when useDarkTheme is false. darkColorScheme The Colors to utilize when useDarkTheme is true. shapes The shape definitions to use for component rendering. assets Various assets used throughout the components (empty states, logo) fonts The fonts to utilize for all Text within Components."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui/BotStacks</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/#botstacks","title":"BotStacks","text":"<p>[common]\\ object BotStacks</p> <p>Compose composition access to the various theme controls set in BotStacksThemeEngine</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/#properties","title":"Properties","text":"Name Summary assets [common]@get:Composable@get:ReadOnlyComposableval assets: Assets colorScheme [common]@get:Composable@get:ReadOnlyComposableval colorScheme: ColorsRetrieves the current Colors at the call site's position in the hierarchy. dimens [common]@get:Composable@get:ReadOnlyComposableval dimens: Dimensions fonts [common]@get:Composable@get:ReadOnlyComposableval fonts: FontsRetrieves the current Fonts at the call site's position in the hierarchy. shapes [common]@get:Composable@get:ReadOnlyComposableval shapes: Shapes"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/assets/","title":"Assets","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui/BotStacks/assets</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/assets/#assets","title":"assets","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>@get:ReadOnlyComposable</p> <p>val assets: Assets</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/color-scheme/","title":"Color scheme","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui/BotStacks/colorScheme</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/color-scheme/#colorscheme","title":"colorScheme","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>@get:ReadOnlyComposable</p> <p>val colorScheme: Colors</p> <p>Retrieves the current Colors at the call site's position in the hierarchy.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/dimens/","title":"Dimens","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui/BotStacks/dimens</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/dimens/#dimens","title":"dimens","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>@get:ReadOnlyComposable</p> <p>val dimens: Dimensions</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/fonts/","title":"Fonts","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui/BotStacks/fonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/fonts/#fonts","title":"fonts","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>@get:ReadOnlyComposable</p> <p>val fonts: Fonts</p> <p>Retrieves the current Fonts at the call site's position in the hierarchy.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/shapes/","title":"Shapes","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui/BotStacks/shapes</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui/-bot-stacks/shapes/#shapes","title":"shapes","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>@get:ReadOnlyComposable</p> <p>val shapes: Shapes</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/#types","title":"Types","text":"Name Summary ActionSheetState [common]abstract class ActionSheetState(sheetState: ModalBottomSheetState) AvatarDefaults [common]object AvatarDefaultsDefaults for the Avatar component AvatarSize [common]interface AvatarSizeSize constraint system for rendering the avatar component AvatarType [common]interface AvatarTypeType definition for a given Avatar instance HeaderDefaults [common]object HeaderDefaultsDefault constraints and actions for Header provided as convenience. These each come with preset styling. HeaderState [common]class HeaderState(val showSearch: Boolean = false, val showSearchClear: Boolean = false, isSearchActive: Boolean = false)HeaderState MediaActionSheetState [common]class MediaActionSheetState(chat: Chat, sheetState: ModalBottomSheetState) : ActionSheetStateMediaActionSheetState MessageActionSheetState [common]class MessageActionSheetState(sheetState: ModalBottomSheetState) : ActionSheetStateMediaActionSheetState OverflowMenuScope [common]interface OverflowMenuScopeInterface that an OverflowMenu renders items based upon. This is utilized in Header for the Header.menu."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/#functions","title":"Functions","text":"Name Summary _Badge [ios]fun _Badge(count: Int): UIViewController Avatar [common]@Composablefun Avatar(modifier: Modifier = Modifier, size: AvatarSize = AvatarDefaults.Size, status: OnlineStatus = OnlineStatus.Unknown, url: String?, chat: Boolean = false)@Composablefun Avatar(modifier: Modifier = Modifier, size: AvatarSize = AvatarDefaults.Size, user: User, showOnlineStatus: Boolean = true, isSelected: Boolean = false, isRemovable: Boolean = false)@Composablefun Avatar(modifier: Modifier = Modifier, backgroundColor: Color = AvatarDefaults.BackgroundColor, contentColor: Color = AvatarDefaults.ContentColor, size: AvatarSize = AvatarDefaults.Size, type: AvatarType, isSelected: Boolean = false, isRemovable: Boolean = false)Avatar Badge [common]@Composablefun Badge(count: Int, modifier: Modifier = Modifier)@Composablefun Badge(label: String, modifier: Modifier = Modifier)@Composablefun Badge(label: String, modifier: Modifier = Modifier, backgroundColor: Color = BotStacks.colorScheme.primary, contentColor: Color = BotStacks.colorScheme.onPrimary, contentPadding: PaddingValues = PaddingValues(         horizontal = BotStacks.dimens.grid.x2,         vertical = BotStacks.dimens.grid.x1     ), fontStyle: FontStyle = BotStacks.fonts.caption2, shape: Shape = CircleShape)Badge ChannelGroup [common]@Composablefun ChannelGroup(modifier: Modifier = Modifier, channels: List&lt;Chat&gt;)ChannelGroup ChannelRow [common]@Composablefun ChannelRow(modifier: Modifier = Modifier, chat: Chat, showMemberPreview: Boolean = false, titleFontStyle: FontStyle = BotStacks.fonts.body1, titleColor: Color = BotStacks.colorScheme.onBackground, subtitleFontStyle: FontStyle = BotStacks.fonts.body1, subtitleColor: Color = BotStacks.colorScheme.caption, onClick: () -&gt; Unit = { })@Composablefun ChannelRow(modifier: Modifier, imageUrls: List&lt;String?&gt;, title: String, titleFontStyle: FontStyle = BotStacks.fonts.body1, titleColor: Color = BotStacks.colorScheme.onBackground, subtitle: String? = null, subtitleFontStyle: FontStyle = BotStacks.fonts.body1, subtitleColor: Color = BotStacks.colorScheme.caption, onClick: () -&gt; Unit)ChannelRow ChatInput [common]@Composablefun ChatInput(modifier: Modifier = Modifier, chat: Chat, onMedia: () -&gt; Unit, focusRequester: FocusRequester = remember { FocusRequester() })ChatInput ChatList [common]@Composablefun ChatList(modifier: Modifier = Modifier, header: @Composable() -&gt; Unit = { }, emptyState: @Composable() -&gt; Unit = { EmptyListView(config = BotStacks.assets.emptyChats)  }, filter: (Chat) -&gt; Boolean = { true }, onChatClicked: (Chat) -&gt; Unit)ChatList ChatMessage [common]@Composablefun ChatMessage(modifier: Modifier = Modifier, message: Message, shape: CornerBasedShape = shapes.medium, showAvatar: Boolean = false, showTimestamp: Boolean = true, onPressUser: (User) -&gt; Unit, onLongPress: () -&gt; Unit, onClick: (MessageAttachment?) -&gt; Unit? = null)ChatMessage ChatMessagePreview [common]@Composablefun ChatMessagePreview(modifier: Modifier = Modifier, chat: Chat, onClick: () -&gt; Unit)ChatMessagePreview Header [common]@Composablefun Header()@Composablefun Header(title: @Composable() -&gt; Unit = { }, icon: @Composable() -&gt; Unit = { }, state: HeaderState = rememberHeaderState(), onSearchClick: () -&gt; Unit? = null, onAdd: () -&gt; Unit? = null, onCompose: () -&gt; Unit? = null, onBackClicked: () -&gt; Unit? = null, menu: OverflowMenuScope.() -&gt; Unit? = null, endAction: @Composable() -&gt; Unit = { })@Composablefun Header(title: String, icon: @Composable() -&gt; Unit = { }, state: HeaderState = rememberHeaderState(), onSearchClick: () -&gt; Unit? = null, onAdd: () -&gt; Unit? = null, onCompose: () -&gt; Unit? = null, onBackClicked: () -&gt; Unit? = null, menu: OverflowMenuScope.() -&gt; Unit? = null, endAction: @Composable() -&gt; Unit = { })Header MediaActionSheet [common]@Composablefun MediaActionSheet(state: MediaActionSheetState, content: @Composable() -&gt; Unit)MediaActionSheet MessageActionSheet [common]@Composablefun MessageActionSheet(state: MessageActionSheetState = rememberMessageActionSheetState(), content: @Composable() -&gt; Unit)MessageActionSheet MessageList [common]@Composablefun MessageList(modifier: Modifier = Modifier, chat: Chat, header: @Composable() -&gt; Unit = { }, emptyState: @Composable() -&gt; Unit = { EmptyListView(config = assets.emptyChat) }, onPressUser: (User) -&gt; Unit, onLongPress: (Message) -&gt; Unit)MessageList rememberHeaderState [common]@Composablefun rememberHeaderState(isSearchVisible: Boolean = false, isSearchActive: Boolean = false, showSearchClear: Boolean = false): HeaderStateCreates a HeaderState and remembers it. rememberMediaActionSheetState [common]@Composablefun rememberMediaActionSheetState(chat: Chat): MediaActionSheetStateCreates a MediaActionSheetState and remembers it. rememberMessageActionSheetState [common]@Composablefun rememberMessageActionSheetState(message: Message? = null): MessageActionSheetStateCreates a MessageActionSheetState and remembers it. Spinner [common]@Composablefun Spinner(modifier: Modifier = Modifier)Spinner UserProfile [common]@Composablefun UserProfile(modifier: Modifier = Modifier, user: User)UserProfile UserSelect [common]@Composablefun UserSelect(modifier: Modifier = Modifier, selectedUsers: List&lt;User&gt;, canRemove: Boolean = false, showAdd: Boolean = true, onRemove: (User) -&gt; Unit = { }, onAddSelected: () -&gt; Unit = { })UserSelect"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar/","title":"avatar","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/Avatar</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar/#avatar","title":"Avatar","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun Avatar(modifier: Modifier = Modifier, size: AvatarSize = AvatarDefaults.Size, user: User, showOnlineStatus: Boolean = true, isSelected: Boolean = false, isRemovable: Boolean = false)</p> <p>Avatar</p> <p>Renders the display image for a user in a bordered circle at the specified size.</p> <p>This is a convenience wrapper around User to handle OnlineStatus easily.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar/#parameters","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this Avatar size Size to display user User for the avatar showOnlineStatus if enabled, the online status indicator will show if not UNKNOWN. isSelected Whether to show the selected state for this avatar (checkmark in bottom right). isRemovable Whether to show the removable state for this avatar (x in bottom right).NOTE: isSelected and isRemovable supersede online status indicator. <p>[common]\\</p> <p>@Composable</p> <p>fun Avatar(modifier: Modifier = Modifier, size: AvatarSize = AvatarDefaults.Size, status: OnlineStatus = OnlineStatus.Unknown, url: String?, chat: Boolean = false)</p> <p>Avatar</p> <p>Renders the display image for a given URL in a bordered circle at the specified size.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar/#parameters_1","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this Avatar size Size to display status optional online status url The URL of the image to render. chat Whether or not this Avatar is for a chat. True for a channel, group, false for a user, DM. <p>[common]\\</p> <p>@Composable</p> <p>fun Avatar(modifier: Modifier = Modifier, backgroundColor: Color = AvatarDefaults.BackgroundColor, contentColor: Color = AvatarDefaults.ContentColor, size: AvatarSize = AvatarDefaults.Size, type: AvatarType, isSelected: Boolean = false, isRemovable: Boolean = false)</p> <p>Avatar</p> <p>Renders the display image for a user in a bordered circle at the specified size.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar/#parameters_2","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this Avatar backgroundColor Background color to render behind images (will show in empty state depending on what empty state is). contentColor Content color for items rendered in empty state. size Size to display type Type definition for this Avatar. isSelected Whether to show the selected state for this avatar (checkmark in bottom right). isRemovable Whether to show the removable state for this avatar (x in bottom right)."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-badge/","title":"badge","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/Badge</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-badge/#badge","title":"Badge","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun Badge(count: Int, modifier: Modifier = Modifier)</p> <p>Badge</p> <p>A \"badge\" to show a count.</p> <p>This is utilized in the MessageList component serving as the date separators, in the ChatList component to show unread counts, and in the ChannelSettingsView for displaying admins.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-badge/#parameters","title":"Parameters","text":"<p>common</p> count Count to display in the badge. modifier the Modifier to be applied to this Badge <p>[common]\\</p> <p>@Composable</p> <p>fun Badge(label: String, modifier: Modifier = Modifier)</p> <p>Badge</p> <p>A \"badge\" to show a label.</p> <p>This is utilized in the MessageList component serving as the date separators, in the ChatList component to show unread counts, and in the ChannelSettingsView for displaying admins.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-badge/#parameters_1","title":"Parameters","text":"<p>common</p> label The text to be displayed in the badge. modifier the Modifier to be applied to this Badge <p>[common]\\</p> <p>@Composable</p> <p>fun Badge(label: String, modifier: Modifier = Modifier, backgroundColor: Color = BotStacks.colorScheme.primary, contentColor: Color = BotStacks.colorScheme.onPrimary, contentPadding: PaddingValues = PaddingValues(         horizontal = BotStacks.dimens.grid.x2,         vertical = BotStacks.dimens.grid.x1     ), fontStyle: FontStyle = BotStacks.fonts.caption2, shape: Shape = CircleShape)</p> <p>Badge</p> <p>A \"badge\" to show a label.</p> <p>This is utilized in the MessageList component serving as the date separators, in the ChatList component to show unread counts, and in the ChannelSettingsView for displaying admins.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-badge/#parameters_2","title":"Parameters","text":"<p>common</p> label The text to be displayed in the badge. modifier the Modifier to be applied to this Badge backgroundColor Background color of the badge. contentColor Text color of the badge. contentPadding Padding around the badge content. fontStyle Style for the text in the badge. shape Shape of the badge."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-channel-group/","title":"channel group","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ChannelGroup</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-channel-group/#channelgroup","title":"ChannelGroup","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun ChannelGroup(modifier: Modifier = Modifier, channels: List&lt;Chat&gt;)</p> <p>ChannelGroup</p> <p>Renders a given list of Chat channels in a Column.</p> <p>This renders each chat in its own ChannelRow, with the Chat.displayName as the title and the subtitle showing a preview of the members with in it.</p> <p>This is utilized in the UserDetailsView to show channels the current user has in common with any other user.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-channel-group/#parameters","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this ChannelList channels List of channels to show in the list."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-channel-row/","title":"channel row","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ChannelRow</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-channel-row/#channelrow","title":"ChannelRow","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun ChannelRow(modifier: Modifier = Modifier, chat: Chat, showMemberPreview: Boolean = false, titleFontStyle: FontStyle = BotStacks.fonts.body1, titleColor: Color = BotStacks.colorScheme.onBackground, subtitleFontStyle: FontStyle = BotStacks.fonts.body1, subtitleColor: Color = BotStacks.colorScheme.caption, onClick: () -&gt; Unit = { })</p> <p>ChannelRow</p> <p>Renders a given Chat in a Row.</p> <p>This is a convenience wrapper around Chat to handle extract the default information to display.</p> <p>This is utilized in the ChannelGroup within UserDetailsView to show channels the current user has in common with any other user.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-channel-row/#parameters","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this ChannelRow chat The channel to display showMemberPreview Whether to show a member preview as the subtitle. titleFontStyle FontStyle for the title (top text). titleColor Color for the title. subtitleFontStyle FontStyle for the subtitle (bottom text). subtitleColor Color for the subtitle. onClick called when this button is clicked <p>[common]\\</p> <p>@Composable</p> <p>fun ChannelRow(modifier: Modifier, imageUrls: List&lt;String?&gt;, title: String, titleFontStyle: FontStyle = BotStacks.fonts.body1, titleColor: Color = BotStacks.colorScheme.onBackground, subtitle: String? = null, subtitleFontStyle: FontStyle = BotStacks.fonts.body1, subtitleColor: Color = BotStacks.colorScheme.caption, onClick: () -&gt; Unit)</p> <p>ChannelRow</p> <p>Used to render information about a Chat.</p> <p>This is utilized in the ChannelGroup within UserDetailsView to show channels the current user has in common with any other user.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-channel-row/#parameters_1","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this ChannelRow imageUrls User image urls of members of the channel. title Text to display in title slot (top text). titleFontStyle FontStyle for the title (top text). titleColor Color for the title. subtitle Optional text to display in subtitle slot (bottom text). subtitleFontStyle FontStyle for the subtitle (bottom text). subtitleColor Color for the subtitle. onClick called when this button is clicked"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-input/","title":"chat input","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ChatInput</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-input/#chatinput","title":"ChatInput","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun ChatInput(modifier: Modifier = Modifier, chat: Chat, onMedia: () -&gt; Unit, focusRequester: FocusRequester = remember { FocusRequester() })</p> <p>ChatInput</p> <p>Text input that handles the sending of messages to a given Chat when the send button is pressed. This is generally used for MessageList as there is handling for an attachment sheet that will present from the callback onMedia.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-input/#parameters","title":"Parameters","text":"<p>common</p> modifier The modifier for this ChatInput chat The chat associated with this input onMedia when the media button is pressed. focusRequester An optional focus requester if you need to react to changes in focus of the TextInput."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-list/","title":"chat list","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ChatList</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-list/#chatlist","title":"ChatList","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun ChatList(modifier: Modifier = Modifier, header: @Composable() -&gt; Unit = { }, emptyState: @Composable() -&gt; Unit = { EmptyListView(config = BotStacks.assets.emptyChats)  }, filter: (Chat) -&gt; Boolean = { true }, onChatClicked: (Chat) -&gt; Unit)</p> <p>ChatList</p> <p>Renders a given list of Chat in an infinite scrolling list. Each chat will render a preview of it using ChatMessagePreview.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-list/#parameters","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this ChatList header Optional header to display, fixed, at the top of the list. Normally this would be a Header. emptyState Optional UI state for when there is no chats available. See ai.botstacks.sdk.ui.theme.Assets and ai.botstacks.sdk.ui.theme.EmptyScreenConfig filter predicate to filter the chats that are loaded. This is generally done from search in Header. onChatClicked callback for when a Chat in the list is clicked."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-message-preview/","title":"chat message preview","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ChatMessagePreview</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-message-preview/#chatmessagepreview","title":"ChatMessagePreview","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun ChatMessagePreview(modifier: Modifier = Modifier, chat: Chat, onClick: () -&gt; Unit)</p> <p>ChatMessagePreview</p> <p>Renders a \"preview\" for a given chat. This is based on the last message, if any, that was either sent or received in the chat. Attachments will be rendered as well.</p> <p>This is utilized in ChatList to show previews for all chats that a user is currently a member of.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-message-preview/#parameters","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this preview. chat The chat to extract info from for the preview. onClick callback when the contents is clicked."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-message/","title":"chat message","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ChatMessage</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-message/#chatmessage","title":"ChatMessage","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun ChatMessage(modifier: Modifier = Modifier, message: Message, shape: CornerBasedShape = shapes.medium, showAvatar: Boolean = false, showTimestamp: Boolean = true, onPressUser: (User) -&gt; Unit, onLongPress: () -&gt; Unit, onClick: (MessageAttachment?) -&gt; Unit? = null)</p> <p>ChatMessage</p> <p>Renders the contents of a given Message from a ai.botstacks.sdk.state.Chat. This is used by MessageList to form the contents of a conversational chat, by properly aligning messages to left or right depending on sender (left aligned for incoming and right aligned for outgoing).</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-chat-message/#parameters","title":"Parameters","text":"<p>common</p> modifier The modifier to apply to this message. message The message to display. shape corner-based shaped to render the \"bubble\" in. This defaults to ai.botstacks.sdk.ui.theme.ShapeDefinitions.medium. showAvatar Whether to show the associated user's avatar along with this message. showTimestamp Whether to show the timestamp this message was sent or received. onPressUser callback for when a user's avatar (when visible) is clicked. onLongPress callback for when a message \"bubble\" is clicked. onClick callback for when an attachment is clicked. This is utlized by MessageList to show images for full screen viewing."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header/","title":"header","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/Header</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header/#header","title":"Header","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun Header(title: String, icon: @Composable() -&gt; Unit = { }, state: HeaderState = rememberHeaderState(), onSearchClick: () -&gt; Unit? = null, onAdd: () -&gt; Unit? = null, onCompose: () -&gt; Unit? = null, onBackClicked: () -&gt; Unit? = null, menu: OverflowMenuScope.() -&gt; Unit? = null, endAction: @Composable() -&gt; Unit = { })</p> <p>Header</p> <p>A top bar that can be utilized together with a content view to create a screen.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header/#parameters","title":"Parameters","text":"<p>common</p> title The title string to display icon An optional icon to display when up navigation is not present. state The state for the header. onSearchClick callback for when search icon is clicked if visible via state. onAdd callback for when the add option is clicked onCompose callback when the compose option is clicked onBackClicked callback for when up navigation is clicked. Providing this callback will enable up navigation to show. menu adds an overflow menu, and this lambda defines the contents of it via OverflowMenuScope. endAction optional slot for an additional action at the end. <p>[common]\\</p> <p>@Composable</p> <p>fun Header()</p> <p>Header</p> <p>A simplified implementation with all defaults showing the defined Logo.</p> <p>[common]\\</p> <p>@Composable</p> <p>fun Header(title: @Composable() -&gt; Unit = { }, icon: @Composable() -&gt; Unit = { }, state: HeaderState = rememberHeaderState(), onSearchClick: () -&gt; Unit? = null, onAdd: () -&gt; Unit? = null, onCompose: () -&gt; Unit? = null, onBackClicked: () -&gt; Unit? = null, menu: OverflowMenuScope.() -&gt; Unit? = null, endAction: @Composable() -&gt; Unit = { })</p> <p>Header</p> <p>A top bar that can be utilized together with a content view to create a screen.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header/#parameters_1","title":"Parameters","text":"<p>common</p> title Title slot to render your own defined component (Text). icon An optional icon to display when up navigation is not present. state The state for the header. onSearchClick callback for when search icon is clicked if visible via state. onAdd callback for when the add option is clicked onCompose callback when the compose option is clicked onBackClicked callback for when up navigation is clicked. Providing this callback will enable up navigation to show. menu adds an overflow menu, and this lambda defines the contents of it via OverflowMenuScope. endAction optional slot for an additional action at the end."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-media-action-sheet/","title":"media action sheet","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/MediaActionSheet</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-media-action-sheet/#mediaactionsheet","title":"MediaActionSheet","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun MediaActionSheet(state: MediaActionSheetState, content: @Composable() -&gt; Unit)</p> <p>MediaActionSheet</p> <p>A modal bottom sheet that displays attachments that can be sent in a chat. This is a top level scaffold that is designed to wrap your screen content.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-media-action-sheet/#parameters","title":"Parameters","text":"<p>common</p> state the state for this action sheet. chat The chat the selected attachments will be sent to. content your screen content."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet/","title":"message action sheet","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/MessageActionSheet</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet/#messageactionsheet","title":"MessageActionSheet","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun MessageActionSheet(state: MessageActionSheetState = rememberMessageActionSheetState(), content: @Composable() -&gt; Unit)</p> <p>MessageActionSheet</p> <p>A modal bottom sheet that allows contextual actions for a given messaged. This is a top level scaffold that is designed to wrap your screen content.</p> <p>This can be utilized in conjunction with MessageList to show contextual actions fro the MessageListView#onLongPress callback</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet/#parameters","title":"Parameters","text":"<p>common</p> state the state for the ModalBottomSheet. @see ModalBottomSheetState content your screen content."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-list/","title":"message list","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/MessageList</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-list/#messagelist","title":"MessageList","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun MessageList(modifier: Modifier = Modifier, chat: Chat, header: @Composable() -&gt; Unit = { }, emptyState: @Composable() -&gt; Unit = { EmptyListView(config = assets.emptyChat) }, onPressUser: (User) -&gt; Unit, onLongPress: (Message) -&gt; Unit)</p> <p>MessageList</p> <p>A conversational component displaying the messages for a given Chat in an infinite scrolling list.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-list/#parameters","title":"Parameters","text":"<p>common</p> modifier the Modifier to be applied to this list. chat The chat to render messages for. onPressUser callback when a user's avatar is pressed when visible next to a given message. (only applicable in multi user based chats). onLongPress callback when a message is long pressed. This can be utilized with MessageActionSheet to show contextual actions."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-spinner/","title":"spinner","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/Spinner</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-spinner/#spinner","title":"Spinner","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun Spinner(modifier: Modifier = Modifier)</p> <p>Spinner</p> <p>Themed spinner, colored with ai.botstacks.sdk.ui.theme.Colors.primary.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-spinner/#parameters","title":"Parameters","text":"<p>common</p> modifier The modifier to apply to the spinner."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-user-profile/","title":"user profile","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/UserProfile</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-user-profile/#userprofile","title":"UserProfile","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun UserProfile(modifier: Modifier = Modifier, user: User)</p> <p>UserProfile</p> <p>Renders an Avatar and the display name for a given User in a centered Column.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-user-profile/#parameters","title":"Parameters","text":"<p>common</p> modifier The modifier to apply to the Column user The user to show in the view"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-user-select/","title":"user select","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/UserSelect</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-user-select/#userselect","title":"UserSelect","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun UserSelect(modifier: Modifier = Modifier, selectedUsers: List&lt;User&gt;, canRemove: Boolean = false, showAdd: Boolean = true, onRemove: (User) -&gt; Unit = { }, onAddSelected: () -&gt; Unit = { })</p> <p>UserSelect</p> <p>A component that renders User's in a horizontally scrolling Row. This is primarily used in CreateChannelView for showing currently selected Users and allowing the ability to add more if desired.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-user-select/#parameters","title":"Parameters","text":"<p>common</p> modifier The modifier to apply to this component selectedUsers Currently selected users canRemove If enabled, currently selected users can be removed on click (Will trigger onRemove. showAdd If enabled, a trailing add option will appear allowing you to handle onAddSelected to navigate to another view to add users. @see SelectChannelUsers for a use case. onRemove callback for when a user is removed. onAddSelected callback when the trailing add option is clicked; requires showAdd to be true."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/_-badge/","title":"badge","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/_Badge</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/_-badge/#_badge","title":"_Badge","text":"<p>[ios]\\ fun _Badge(count: Int): UIViewController</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/remember-header-state/","title":"Remember header state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/rememberHeaderState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/remember-header-state/#rememberheaderstate","title":"rememberHeaderState","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun rememberHeaderState(isSearchVisible: Boolean = false, isSearchActive: Boolean = false, showSearchClear: Boolean = false): HeaderState</p> <p>Creates a HeaderState and remembers it.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/remember-header-state/#parameters","title":"Parameters","text":"<p>common</p> isSearchVisible if a search icon should be shown in the header. isSearchActive Whether search should be active by default or not. showSearchClear If enabled, a clear option will be present as a trailingIcon in the search field."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/remember-media-action-sheet-state/","title":"Remember media action sheet state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/rememberMediaActionSheetState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/remember-media-action-sheet-state/#remembermediaactionsheetstate","title":"rememberMediaActionSheetState","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun rememberMediaActionSheetState(chat: Chat): MediaActionSheetState</p> <p>Creates a MediaActionSheetState and remembers it.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/remember-message-action-sheet-state/","title":"Remember message action sheet state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/rememberMessageActionSheetState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/remember-message-action-sheet-state/#remembermessageactionsheetstate","title":"rememberMessageActionSheetState","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun rememberMessageActionSheetState(message: Message? = null): MessageActionSheetState</p> <p>Creates a MessageActionSheetState and remembers it.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ActionSheetState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/#actionsheetstate","title":"ActionSheetState","text":"<p>abstract class ActionSheetState(sheetState: ModalBottomSheetState)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/#inheritors","title":"Inheritors","text":"MediaActionSheetState MessageActionSheetState"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/#constructors","title":"Constructors","text":"ActionSheetState [common]constructor(sheetState: ModalBottomSheetState)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/#functions","title":"Functions","text":"Name Summary hide [common]suspend fun hide() show [common]suspend fun show()"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/-action-sheet-state/","title":"action sheet state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ActionSheetState/ActionSheetState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/-action-sheet-state/#actionsheetstate","title":"ActionSheetState","text":"<p>[common]\\ constructor(sheetState: ModalBottomSheetState)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/hide/","title":"Hide","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ActionSheetState/hide</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/hide/#hide","title":"hide","text":"<p>[common]\\ suspend fun hide()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/show/","title":"Show","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/ActionSheetState/show</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-action-sheet-state/show/#show","title":"show","text":"<p>[common]\\ suspend fun show()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarDefaults</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/#avatardefaults","title":"AvatarDefaults","text":"<p>[common]\\ object AvatarDefaults</p> <p>Defaults for the Avatar component</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/#properties","title":"Properties","text":"Name Summary BackgroundColor [common]@get:Composableval BackgroundColor: Color ContentColor [common]@get:Composableval ContentColor: Color Size [common]val Size: AvatarSize"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/-background-color/","title":"background color","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarDefaults/BackgroundColor</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/-background-color/#backgroundcolor","title":"BackgroundColor","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>val BackgroundColor: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/-content-color/","title":"content color","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarDefaults/ContentColor</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/-content-color/#contentcolor","title":"ContentColor","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>val ContentColor: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/-size/","title":"size","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarDefaults/Size</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-defaults/-size/#size","title":"Size","text":"<p>[common]\\ val Size: AvatarSize</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/#avatarsize","title":"AvatarSize","text":"<p>interface AvatarSize</p> <p>Size constraint system for rendering the avatar component</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/#inheritors","title":"Inheritors","text":"Small Large Custom"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/#types","title":"Types","text":"Name Summary Custom [common]data class Custom(val dp: Dp) : AvatarSizeCustom definition Large [common]data object Large : AvatarSizeLarge definition - renders at 100 dp on Android and 100px on iOS Small [common]data object Small : AvatarSizeSmall definition - renders at 50 dp on Android and 50px on iOS"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/#properties","title":"Properties","text":"Name Summary value [common]abstract val value: Dp"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/value/","title":"Value","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/value</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/value/#value","title":"value","text":"<p>[common]\\ abstract val value: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/Custom</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/#custom","title":"Custom","text":"<p>[common]\\ data class Custom(val dp: Dp) : AvatarSize</p> <p>Custom definition</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/#constructors","title":"Constructors","text":"Custom [common]constructor(dp: Dp)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/#properties","title":"Properties","text":"Name Summary dp [common]val dp: Dp value [common]open override val value: Dp"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/-custom/","title":"custom","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/Custom/Custom</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/-custom/#custom","title":"Custom","text":"<p>[common]\\ constructor(dp: Dp)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/dp/","title":"Dp","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/Custom/dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/dp/#dp","title":"dp","text":"<p>[common]\\ val dp: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/value/","title":"Value","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/Custom/value</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-custom/value/#value","title":"value","text":"<p>[common]\\ open override val value: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-large/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/Large</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-large/#large","title":"Large","text":"<p>[common]\\ data object Large : AvatarSize</p> <p>Large definition - renders at 100 dp on Android and 100px on iOS</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-large/#properties","title":"Properties","text":"Name Summary value [common]open override val value: Dp"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-large/value/","title":"Value","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/Large/value</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-large/value/#value","title":"value","text":"<p>[common]\\ open override val value: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-small/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/Small</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-small/#small","title":"Small","text":"<p>[common]\\ data object Small : AvatarSize</p> <p>Small definition - renders at 50 dp on Android and 50px on iOS</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-small/#properties","title":"Properties","text":"Name Summary value [common]open override val value: Dp"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-small/value/","title":"Value","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarSize/Small/value</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-size/-small/value/#value","title":"value","text":"<p>[common]\\ open override val value: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/#avatartype","title":"AvatarType","text":"<p>interface AvatarType</p> <p>Type definition for a given Avatar instance</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/#inheritors","title":"Inheritors","text":"User Channel"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/#types","title":"Types","text":"Name Summary Channel [common]data class Channel(val urls: List&lt;String?&gt;, val empty: Painter? = null) : AvatarTypeRenders an Avatar for a given Chat channel. User [common]data class User(val url: Any?, val status: OnlineStatus = OnlineStatus.Unknown, val empty: Painter? = null) : AvatarTypeRenders an Avatar for a given User"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/#properties","title":"Properties","text":"Name Summary emptyState [common]@get:Composableopen val emptyState: Painter?"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/empty-state/","title":"Empty state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/emptyState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/empty-state/#emptystate","title":"emptyState","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>open val emptyState: Painter?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/Channel</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/#channel","title":"Channel","text":"<p>data class Channel(val urls: List&lt;String?&gt;, val empty: Painter? = null) : AvatarType</p> <p>Renders an Avatar for a given Chat channel.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/#parameters","title":"Parameters","text":"<p>common</p> urls The remote URLs for the users in the channel. empty The empty state painter when fails to load"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/#constructors","title":"Constructors","text":"Channel [common]constructor(urls: List&lt;String?&gt;, empty: Painter? = null)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/#properties","title":"Properties","text":"Name Summary empty [common]val empty: Painter? = null emptyState [common]@get:Composableopen override val emptyState: Painter urls [common]val urls: List&lt;String?&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/-channel/","title":"channel","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/Channel/Channel</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/-channel/#channel","title":"Channel","text":"<p>[common]\\ constructor(urls: List&lt;String?&gt;, empty: Painter? = null)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/-channel/#parameters","title":"Parameters","text":"<p>common</p> urls The remote URLs for the users in the channel. empty The empty state painter when fails to load"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/empty-state/","title":"Empty state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/Channel/emptyState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/empty-state/#emptystate","title":"emptyState","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>open override val emptyState: Painter</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/empty/","title":"Empty","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/Channel/empty</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/empty/#empty","title":"empty","text":"<p>[common]\\ val empty: Painter? = null</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/empty/#parameters","title":"Parameters","text":"<p>common</p> empty The empty state painter when fails to load"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/urls/","title":"Urls","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/Channel/urls</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/urls/#urls","title":"urls","text":"<p>[common]\\ val urls: List&lt;String?&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-channel/urls/#parameters","title":"Parameters","text":"<p>common</p> urls The remote URLs for the users in the channel."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/User</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/#user","title":"User","text":"<p>data class User(val url: Any?, val status: OnlineStatus = OnlineStatus.Unknown, val empty: Painter? = null) : AvatarType</p> <p>Renders an Avatar for a given User</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/#parameters","title":"Parameters","text":"<p>common</p> url The remote URL from User.url status The online status for the user - if left defaulted to UNKNOWN then will not show empty The empty state painter when fails to load"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/#constructors","title":"Constructors","text":"User [common]constructor(url: Any?, status: OnlineStatus = OnlineStatus.Unknown, empty: Painter? = null)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/#properties","title":"Properties","text":"Name Summary empty [common]val empty: Painter? = null emptyState [common]@get:Composableopen override val emptyState: Painter status [common]val status: OnlineStatus url [common]val url: Any?"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/-user/","title":"user","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/User/User</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/-user/#user","title":"User","text":"<p>[common]\\ constructor(url: Any?, status: OnlineStatus = OnlineStatus.Unknown, empty: Painter? = null)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/-user/#parameters","title":"Parameters","text":"<p>common</p> url The remote URL from User.url status The online status for the user - if left defaulted to UNKNOWN then will not show empty The empty state painter when fails to load"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/empty-state/","title":"Empty state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/User/emptyState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/empty-state/#emptystate","title":"emptyState","text":"<p>[common]\\</p> <p>@get:Composable</p> <p>open override val emptyState: Painter</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/empty/","title":"Empty","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/User/empty</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/empty/#empty","title":"empty","text":"<p>[common]\\ val empty: Painter? = null</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/empty/#parameters","title":"Parameters","text":"<p>common</p> empty The empty state painter when fails to load"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/status/","title":"Status","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/User/status</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/status/#status","title":"status","text":"<p>[common]\\ val status: OnlineStatus</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/status/#parameters","title":"Parameters","text":"<p>common</p> status The online status for the user - if left defaulted to UNKNOWN then will not show"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/url/","title":"Url","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/AvatarType/User/url</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/url/#url","title":"url","text":"<p>[common]\\ val url: Any?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-avatar-type/-user/url/#parameters","title":"Parameters","text":"<p>common</p> url The remote URL from User.url"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderDefaults</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/#headerdefaults","title":"HeaderDefaults","text":"<p>[common]\\ object HeaderDefaults</p> <p>Default constraints and actions for Header provided as convenience. These each come with preset styling.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/#properties","title":"Properties","text":"Name Summary IconSize [common]val IconSize: Dp"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/#functions","title":"Functions","text":"Name Summary CreateAction [common]@Composablefun CreateAction(onClick: () -&gt; Unit)\"Create\" action for the endAction slot in the Header. Logo [common]@Composablefun Logo()Logo component used in the icon slot of the Header. MenuAction [common]@Composablefun MenuAction(onClick: () -&gt; Unit)Overflow \"Menu\" action for the endAction slot in the Header. This can be used to show an OverflowMenu. NextAction [common]@Composablefun NextAction(onClick: () -&gt; Unit)\"Next\" action for the endAction slot in the Header. SaveAction [common]@Composablefun SaveAction(onClick: () -&gt; Unit)\"Save\" action for the endAction slot in the Header. Title [common]@Composablefun Title(text: String)Title component used in the title slot of the Header."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-create-action/","title":"create action","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderDefaults/CreateAction</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-create-action/#createaction","title":"CreateAction","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun CreateAction(onClick: () -&gt; Unit)</p> <p>\"Create\" action for the endAction slot in the Header.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-icon-size/","title":"icon size","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderDefaults/IconSize</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-icon-size/#iconsize","title":"IconSize","text":"<p>[common]\\ val IconSize: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-logo/","title":"logo","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderDefaults/Logo</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-logo/#logo","title":"Logo","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun Logo()</p> <p>Logo component used in the icon slot of the Header.</p> <p>This will use the ai.botstacks.sdk.ui.theme.Assets.logo if provided otherwise will default to the BotStacks Logo.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-menu-action/","title":"menu action","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderDefaults/MenuAction</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-menu-action/#menuaction","title":"MenuAction","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun MenuAction(onClick: () -&gt; Unit)</p> <p>Overflow \"Menu\" action for the endAction slot in the Header. This can be used to show an OverflowMenu.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-next-action/","title":"next action","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderDefaults/NextAction</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-next-action/#nextaction","title":"NextAction","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun NextAction(onClick: () -&gt; Unit)</p> <p>\"Next\" action for the endAction slot in the Header.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-save-action/","title":"save action","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderDefaults/SaveAction</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-save-action/#saveaction","title":"SaveAction","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun SaveAction(onClick: () -&gt; Unit)</p> <p>\"Save\" action for the endAction slot in the Header.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-title/","title":"title","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderDefaults/Title</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-defaults/-title/#title","title":"Title","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun Title(text: String)</p> <p>Title component used in the title slot of the Header.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/#headerstate","title":"HeaderState","text":"<p>[common]\\ class HeaderState(val showSearch: Boolean = false, val showSearchClear: Boolean = false, isSearchActive: Boolean = false)</p> <p>HeaderState</p> <p>State object that drives the UX of a header driving state between search and not.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/#constructors","title":"Constructors","text":"HeaderState [common]constructor(showSearch: Boolean = false, showSearchClear: Boolean = false, isSearchActive: Boolean = false)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/#properties","title":"Properties","text":"Name Summary searchActive [common]var searchActive: Boolean searchQuery [common]var searchQuery: TextFieldValue showSearch [common]val showSearch: Boolean = false showSearchClear [common]val showSearchClear: Boolean = false"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/-header-state/","title":"header state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderState/HeaderState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/-header-state/#headerstate","title":"HeaderState","text":"<p>[common]\\ constructor(showSearch: Boolean = false, showSearchClear: Boolean = false, isSearchActive: Boolean = false)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/search-active/","title":"Search active","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderState/searchActive</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/search-active/#searchactive","title":"searchActive","text":"<p>[common]\\ var searchActive: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/search-query/","title":"Search query","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderState/searchQuery</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/search-query/#searchquery","title":"searchQuery","text":"<p>[common]\\ var searchQuery: TextFieldValue</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/show-search-clear/","title":"Show search clear","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderState/showSearchClear</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/show-search-clear/#showsearchclear","title":"showSearchClear","text":"<p>[common]\\ val showSearchClear: Boolean = false</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/show-search/","title":"Show search","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/HeaderState/showSearch</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-header-state/show-search/#showsearch","title":"showSearch","text":"<p>[common]\\ val showSearch: Boolean = false</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-media-action-sheet-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/MediaActionSheetState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-media-action-sheet-state/#mediaactionsheetstate","title":"MediaActionSheetState","text":"<p>[common]\\ class MediaActionSheetState(chat: Chat, sheetState: ModalBottomSheetState) : ActionSheetState</p> <p>MediaActionSheetState</p> <p>A state that drives visibility of the MediaActionSheet.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-media-action-sheet-state/#constructors","title":"Constructors","text":"MediaActionSheetState [common]constructor(chat: Chat, sheetState: ModalBottomSheetState)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-media-action-sheet-state/-media-action-sheet-state/","title":"media action sheet state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/MediaActionSheetState/MediaActionSheetState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-media-action-sheet-state/-media-action-sheet-state/#mediaactionsheetstate","title":"MediaActionSheetState","text":"<p>[common]\\ constructor(chat: Chat, sheetState: ModalBottomSheetState)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/MessageActionSheetState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet-state/#messageactionsheetstate","title":"MessageActionSheetState","text":"<p>[common]\\ class MessageActionSheetState(sheetState: ModalBottomSheetState) : ActionSheetState</p> <p>MediaActionSheetState</p> <p>A state that drives visibility of the MessageActionSheet.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet-state/#constructors","title":"Constructors","text":"MessageActionSheetState [common]constructor(sheetState: ModalBottomSheetState)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet-state/#properties","title":"Properties","text":"Name Summary messageForAction [common]var messageForAction: Message?"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet-state/-message-action-sheet-state/","title":"message action sheet state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/MessageActionSheetState/MessageActionSheetState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet-state/-message-action-sheet-state/#messageactionsheetstate","title":"MessageActionSheetState","text":"<p>[common]\\ constructor(sheetState: ModalBottomSheetState)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet-state/message-for-action/","title":"Message for action","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/MessageActionSheetState/messageForAction</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-message-action-sheet-state/message-for-action/#messageforaction","title":"messageForAction","text":"<p>[common]\\ var messageForAction: Message?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-overflow-menu-scope/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/OverflowMenuScope</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-overflow-menu-scope/#overflowmenuscope","title":"OverflowMenuScope","text":"<p>[common]\\ interface OverflowMenuScope</p> <p>Interface that an OverflowMenu renders items based upon. This is utilized in Header for the Header.menu.</p> <pre><code>Header(\n    [...],\n    menu = {\n        item { Text(text = \"Item 1\") }\n        label(onClick = {  }) {\n            Text(text = \"Item 2\")\n         }\n     }\n)\n</code></pre>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-overflow-menu-scope/#functions","title":"Functions","text":"Name Summary item [common]abstract fun item(content: @Composable(PaddingValues) -&gt; Unit)Adds an item where content is completely provided by caller. label [common]abstract fun label(enabled: Boolean = true, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit? = null, subtitle: @Composable() -&gt; Unit = { }, title: @Composable() -&gt; Unit)Creates an item within an OverflowMenu."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-overflow-menu-scope/item/","title":"Item","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/OverflowMenuScope/item</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-overflow-menu-scope/item/#item","title":"item","text":"<p>[common]\\ abstract fun item(content: @Composable(PaddingValues) -&gt; Unit)</p> <p>Adds an item where content is completely provided by caller.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-overflow-menu-scope/label/","title":"Label","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.components/OverflowMenuScope/label</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-overflow-menu-scope/label/#label","title":"label","text":"<p>[common]\\ abstract fun label(enabled: Boolean = true, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit? = null, subtitle: @Composable() -&gt; Unit = { }, title: @Composable() -&gt; Unit)</p> <p>Creates an item within an OverflowMenu.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.components/-overflow-menu-scope/label/#parameters","title":"Parameters","text":"<p>common</p> enabled whether clicks are enabled. onClick callback for when this item is clicked. icon Optional leading icon slot for this item. subtitle Optional subtitle to be displayed under title. title Title for this item."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/#types","title":"Types","text":"Name Summary Assets [common]@Stabledata class Assets(val logo: ImageAssetIdentifier? = null, val emptyChat: EmptyScreenConfig.Messages = EmptyScreenConfig.Messages(         caption = \"No messages\",     ), val emptyChats: EmptyScreenConfig.Chats = EmptyScreenConfig.Chats(         caption = \"You haven't added any chats yet\",     ))Assets to be utilized and customized for on-brand experience within BotStacks. Colors [common]@Stableclass Colors(isDark: Boolean, primary: Color, onPrimary: Color, header: Color, onHeader: Color, background: Color, onBackground: Color, surface: Color, onSurface: Color, onSurfaceVariant: Color, border: Color, message: Color, onMessage: Color, chatInput: Color, onChatInput: Color, caption: Color, success: Color, onSuccess: Color, error: Color, onError: Color, ripple: Color, scrim: Color)ColorScheme that drives all BotStacks Components. Dimensions [common]class Dimensions(val border: Dp = 1.dp, val thickBorder: Dp = 2.dp, val inset: Dp, val widthWindowSizeClass: WindowWidthSizeClass = WindowWidthSizeClass.Compact, val heightWindowSizeClass: WindowHeightSizeClass = WindowHeightSizeClass.Compact, val imagePreviewSize: Size = Size(width = 178f, height = 152f), val videoPreviewSize: Size = Size(width = 178f, height = 152f), val grid: GridDimensionSet, val staticGrid: GridDimensionSet = staticGridPreset)Dimensions that drive spacing and padding within Components EmptyScreenConfig [common]sealed class EmptyScreenConfig(val image: @Composable() -&gt; ImageAsset? = { null }, val caption: String? = null, val type: EmptyScreenType)Configuration for an empty state EmptyScreenType [common]interface EmptyScreenTypeType determination for empty states for certain components Fonts [common]@Stableclass Fonts(val h1: FontStyle, val h2: FontStyle, val h3: FontStyle, val body1: FontStyle, val body2: FontStyle, val label1: FontStyle, val label2: FontStyle, val button1: FontStyle, val button2: FontStyle, val caption1: FontStyle, val caption2: FontStyle)Typography system for our Components. FontStyle [common]@Stabledata class FontStyle(val size: TextUnit = 14.sp, val weight: FontWeight = FontWeight.Normal, val family: FontFamily = FontFamily.Default, val textAlign: TextAlign = TextAlign.Unspecified)A Font \"style\" that drives our Fonts GridDimensionSet [common]data class GridDimensionSet(val x1: Dp, val x2: Dp, val x3: Dp, val x4: Dp, val x5: Dp, val x6: Dp, val x7: Dp, val x8: Dp, val x9: Dp, val x10: Dp, val x11: Dp, val x12: Dp, val x13: Dp, val x14: Dp, val x15: Dp, val x16: Dp)Grid dimension set for proper UI scaling. ImageAsset [common]expect class ImageAsset[android]actual typealias ImageAsset = ImageVectorImage asset type. ImageVector for Android[ios]actual typealias ImageAsset = UIImageImage asset type. UIImage for iOS ImageAssetIdentifier [common]expect class ImageAssetIdentifier[android]actual typealias ImageAssetIdentifier = IntImage asset identifier. This is the drawable resource ID on Android.[ios]actual typealias ImageAssetIdentifier = StringImage asset identifier. This is the string asset name normally used in iOS. ShapeDefinitions [common]data class ShapeDefinitions(val small: Dp = 6.dp, val medium: Dp = 10.dp, val large: Dp = 20.dp)Shape definitions for Components."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/#properties","title":"Properties","text":"Name Summary LocalBotStacksAssets [common]val LocalBotStacksAssets: ProvidableCompositionLocal&lt;Assets&gt; LocalBotStacksColorScheme [common]val LocalBotStacksColorScheme: ProvidableCompositionLocal&lt;Colors&gt; LocalBotStacksDimens [common]val LocalBotStacksDimens: ProvidableCompositionLocal&lt;Dimensions&gt; LocalBotStacksFonts [common]val LocalBotStacksFonts: ProvidableCompositionLocal&lt;Fonts&gt; staticGridPreset [common]val staticGridPreset: GridDimensionSetDefault grid system used for Components. We use a 4pt grid."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/#functions","title":"Functions","text":"Name Summary botstacksFonts [common]@Composablefun botstacksFonts(h1: FontStyle = defaultAppFonts().h1, h2: FontStyle = defaultAppFonts().h2, h3: FontStyle = defaultAppFonts().h3, body1: FontStyle = defaultAppFonts().body1, body2: FontStyle = defaultAppFonts().body2, label1: FontStyle = defaultAppFonts().label1, label2: FontStyle = defaultAppFonts().label2, button1: FontStyle = defaultAppFonts().button1, button2: FontStyle = defaultAppFonts().button2, caption1: FontStyle = defaultAppFonts().caption1, caption2: FontStyle = defaultAppFonts().caption2): Fonts darkBotStacksColors [common]fun darkBotStacksColors(primary: Color = BotStacksColorPalette.primary._700, onPrimary: Color = BotStacksColorPalette.light._900, header: Color = BotStacksColorPalette.dark._900, onHeader: Color = BotStacksColorPalette.light._900, background: Color = BotStacksColorPalette.dark._800, onBackground: Color = BotStacksColorPalette.light._600, surface: Color = BotStacksColorPalette.dark._900, onSurface: Color = BotStacksColorPalette.light._900, onSurfaceVariant: Color = BotStacksColorPalette.dark._100, border: Color = BotStacksColorPalette.dark._400, message: Color = BotStacksColorPalette.dark._500, onMessage: Color = BotStacksColorPalette.light._900, chatInput: Color = BotStacksColorPalette.dark._500, onChatInput: Color = BotStacksColorPalette.light._600, caption: Color = BotStacksColorPalette.dark._100, success: Color = BotStacksColorPalette.green._700, onSuccess: Color = BotStacksColorPalette.dark._400, error: Color = BotStacksColorPalette.red._700, onError: Color = Color(0xFF29292D), ripple: Color = BotStacksColorPalette.light._500, scrim: Color = Color(0x4B4D5866)): ColorsDefault \"dark\" color scheme lightBotStacksColors [common]fun lightBotStacksColors(primary: Color = BotStacksColorPalette.primary._800, onPrimary: Color = BotStacksColorPalette.light._900, header: Color = BotStacksColorPalette.primary._100, onHeader: Color = BotStacksColorPalette.dark._900, background: Color = BotStacksColorPalette.light._900, onBackground: Color = BotStacksColorPalette.dark._600, surface: Color = BotStacksColorPalette.light._500, onSurface: Color = BotStacksColorPalette.dark._900, onSurfaceVariant: Color = BotStacksColorPalette.light._100, border: Color = BotStacksColorPalette.light._500, message: Color = BotStacksColorPalette.light._700, onMessage: Color = BotStacksColorPalette.dark._900, chatInput: Color = BotStacksColorPalette.light._600, onChatInput: Color = BotStacksColorPalette.dark._900, caption: Color = BotStacksColorPalette.dark._100, success: Color = BotStacksColorPalette.green._800, onSuccess: Color = BotStacksColorPalette.dark._400, error: Color = BotStacksColorPalette.red._800, onError: Color = BotStacksColorPalette.light._900, ripple: Color = BotStacksColorPalette.dark._100, scrim: Color = Color(0x30313A3B)): ColorsDefault \"Light\" color scheme."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-local-bot-stacks-assets/","title":"local bot stacks assets","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/LocalBotStacksAssets</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-local-bot-stacks-assets/#localbotstacksassets","title":"LocalBotStacksAssets","text":"<p>[common]\\ val LocalBotStacksAssets: ProvidableCompositionLocal&lt;Assets&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-local-bot-stacks-color-scheme/","title":"local bot stacks color scheme","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/LocalBotStacksColorScheme</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-local-bot-stacks-color-scheme/#localbotstackscolorscheme","title":"LocalBotStacksColorScheme","text":"<p>[common]\\ val LocalBotStacksColorScheme: ProvidableCompositionLocal&lt;Colors&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-local-bot-stacks-dimens/","title":"local bot stacks dimens","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/LocalBotStacksDimens</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-local-bot-stacks-dimens/#localbotstacksdimens","title":"LocalBotStacksDimens","text":"<p>[common]\\ val LocalBotStacksDimens: ProvidableCompositionLocal&lt;Dimensions&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-local-bot-stacks-fonts/","title":"local bot stacks fonts","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/LocalBotStacksFonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-local-bot-stacks-fonts/#localbotstacksfonts","title":"LocalBotStacksFonts","text":"<p>[common]\\ val LocalBotStacksFonts: ProvidableCompositionLocal&lt;Fonts&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/botstacks-fonts/","title":"Botstacks fonts","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/botstacksFonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/botstacks-fonts/#botstacksfonts","title":"botstacksFonts","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun botstacksFonts(h1: FontStyle = defaultAppFonts().h1, h2: FontStyle = defaultAppFonts().h2, h3: FontStyle = defaultAppFonts().h3, body1: FontStyle = defaultAppFonts().body1, body2: FontStyle = defaultAppFonts().body2, label1: FontStyle = defaultAppFonts().label1, label2: FontStyle = defaultAppFonts().label2, button1: FontStyle = defaultAppFonts().button1, button2: FontStyle = defaultAppFonts().button2, caption1: FontStyle = defaultAppFonts().caption1, caption2: FontStyle = defaultAppFonts().caption2): Fonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/dark-bot-stacks-colors/","title":"Dark bot stacks colors","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/darkBotStacksColors</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/dark-bot-stacks-colors/#darkbotstackscolors","title":"darkBotStacksColors","text":"<p>[common]\\ fun darkBotStacksColors(primary: Color = BotStacksColorPalette.primary._700, onPrimary: Color = BotStacksColorPalette.light._900, header: Color = BotStacksColorPalette.dark._900, onHeader: Color = BotStacksColorPalette.light._900, background: Color = BotStacksColorPalette.dark._800, onBackground: Color = BotStacksColorPalette.light._600, surface: Color = BotStacksColorPalette.dark._900, onSurface: Color = BotStacksColorPalette.light._900, onSurfaceVariant: Color = BotStacksColorPalette.dark._100, border: Color = BotStacksColorPalette.dark._400, message: Color = BotStacksColorPalette.dark._500, onMessage: Color = BotStacksColorPalette.light._900, chatInput: Color = BotStacksColorPalette.dark._500, onChatInput: Color = BotStacksColorPalette.light._600, caption: Color = BotStacksColorPalette.dark._100, success: Color = BotStacksColorPalette.green._700, onSuccess: Color = BotStacksColorPalette.dark._400, error: Color = BotStacksColorPalette.red._700, onError: Color = Color(0xFF29292D), ripple: Color = BotStacksColorPalette.light._500, scrim: Color = Color(0x4B4D5866)): Colors</p> <p>Default \"dark\" color scheme</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/light-bot-stacks-colors/","title":"Light bot stacks colors","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/lightBotStacksColors</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/light-bot-stacks-colors/#lightbotstackscolors","title":"lightBotStacksColors","text":"<p>[common]\\ fun lightBotStacksColors(primary: Color = BotStacksColorPalette.primary._800, onPrimary: Color = BotStacksColorPalette.light._900, header: Color = BotStacksColorPalette.primary._100, onHeader: Color = BotStacksColorPalette.dark._900, background: Color = BotStacksColorPalette.light._900, onBackground: Color = BotStacksColorPalette.dark._600, surface: Color = BotStacksColorPalette.light._500, onSurface: Color = BotStacksColorPalette.dark._900, onSurfaceVariant: Color = BotStacksColorPalette.light._100, border: Color = BotStacksColorPalette.light._500, message: Color = BotStacksColorPalette.light._700, onMessage: Color = BotStacksColorPalette.dark._900, chatInput: Color = BotStacksColorPalette.light._600, onChatInput: Color = BotStacksColorPalette.dark._900, caption: Color = BotStacksColorPalette.dark._100, success: Color = BotStacksColorPalette.green._800, onSuccess: Color = BotStacksColorPalette.dark._400, error: Color = BotStacksColorPalette.red._800, onError: Color = BotStacksColorPalette.light._900, ripple: Color = BotStacksColorPalette.dark._100, scrim: Color = Color(0x30313A3B)): Colors</p> <p>Default \"Light\" color scheme.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/static-grid-preset/","title":"Static grid preset","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/staticGridPreset</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/static-grid-preset/#staticgridpreset","title":"staticGridPreset","text":"<p>[common]\\ val staticGridPreset: GridDimensionSet</p> <p>Default grid system used for Components. We use a 4pt grid.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Assets</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/#assets","title":"Assets","text":"<p>@Stable</p> <p>data class Assets(val logo: ImageAssetIdentifier? = null, val emptyChat: EmptyScreenConfig.Messages = EmptyScreenConfig.Messages(         caption = \"No messages\",     ), val emptyChats: EmptyScreenConfig.Chats = EmptyScreenConfig.Chats(         caption = \"You haven't added any chats yet\",     ))</p> <p>Assets to be utilized and customized for on-brand experience within BotStacks.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/#parameters","title":"Parameters","text":"<p>common</p> logo An optional logo, will default to the BotStacks Logo if not provided. emptyChat Empty state configuration for EmptyScreenType.Messages emptyChats Empty state configuration for EmptyScreenType.Chats"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/#constructors","title":"Constructors","text":"Assets [common]constructor(logo: ImageAssetIdentifier? = null, emptyChat: EmptyScreenConfig.Messages = EmptyScreenConfig.Messages(         caption = \"No messages\",     ), emptyChats: EmptyScreenConfig.Chats = EmptyScreenConfig.Chats(         caption = \"You haven't added any chats yet\",     ))"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/#properties","title":"Properties","text":"Name Summary emptyChat [common]val emptyChat: EmptyScreenConfig.Messages emptyChats [common]val emptyChats: EmptyScreenConfig.Chats logo [common]val logo: ImageAssetIdentifier? = null logoPainter [common]var logoPainter: Painter?Compose Multiplatform Painter override for logo."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/-assets/","title":"assets","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Assets/Assets</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/-assets/#assets","title":"Assets","text":"<p>[common]\\ constructor(logo: ImageAssetIdentifier? = null, emptyChat: EmptyScreenConfig.Messages = EmptyScreenConfig.Messages(         caption = \"No messages\",     ), emptyChats: EmptyScreenConfig.Chats = EmptyScreenConfig.Chats(         caption = \"You haven't added any chats yet\",     ))</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/-assets/#parameters","title":"Parameters","text":"<p>common</p> logo An optional logo, will default to the BotStacks Logo if not provided. emptyChat Empty state configuration for EmptyScreenType.Messages emptyChats Empty state configuration for EmptyScreenType.Chats"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/empty-chat/","title":"Empty chat","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Assets/emptyChat</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/empty-chat/#emptychat","title":"emptyChat","text":"<p>[common]\\ val emptyChat: EmptyScreenConfig.Messages</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/empty-chat/#parameters","title":"Parameters","text":"<p>common</p> emptyChat Empty state configuration for EmptyScreenType.Messages"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/empty-chats/","title":"Empty chats","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Assets/emptyChats</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/empty-chats/#emptychats","title":"emptyChats","text":"<p>[common]\\ val emptyChats: EmptyScreenConfig.Chats</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/empty-chats/#parameters","title":"Parameters","text":"<p>common</p> emptyChats Empty state configuration for EmptyScreenType.Chats"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/logo-painter/","title":"Logo painter","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Assets/logoPainter</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/logo-painter/#logopainter","title":"logoPainter","text":"<p>[common]\\ var logoPainter: Painter?</p> <p>Compose Multiplatform Painter override for logo.</p> <p>This allows use of Compose Multiplatform Resources or Moko Resources.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/logo-resource/","title":"Logo resource","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Assets/logoResource</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/logo-resource/#logoresource","title":"logoResource","text":"<p>[common]\\ var logoResource: DrawableResource?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/logo/","title":"Logo","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Assets/logo</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/logo/#logo","title":"logo","text":"<p>[common]\\ val logo: ImageAssetIdentifier? = null</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-assets/logo/#parameters","title":"Parameters","text":"<p>common</p> logo An optional logo, will default to the BotStacks Logo if not provided."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/#colors","title":"Colors","text":"<p>@Stable</p> <p>class Colors(isDark: Boolean, primary: Color, onPrimary: Color, header: Color, onHeader: Color, background: Color, onBackground: Color, surface: Color, onSurface: Color, onSurfaceVariant: Color, border: Color, message: Color, onMessage: Color, chatInput: Color, onChatInput: Color, caption: Color, success: Color, onSuccess: Color, error: Color, onError: Color, ripple: Color, scrim: Color)</p> <p>ColorScheme that drives all BotStacks Components.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/#parameters","title":"Parameters","text":"<p>common</p> isDark if this scheme is for Dark mode. primary The primary color is the color displayed most frequently across your app\u2019s screens and components. onPrimary Color used for text and icons displayed on top of the primary color. header The preferred background color for the ai.botstacks.sdk.ui.components.Header component. onHeader Color used for text and icons displayed on top of the header color. background The background color that appears behind scrollable content. onBackground Color used for text and icons displayed on top of the background color. surface The surface color that affect surfaces of components, such as cards, sheets, and menus. onSurface Color used for text and icons displayed on top of the surface color. onSurfaceVariant The color (and state variants) that can be used for content on top of surface. border Subtle color used for boundaries. Outline color role adds contrast for accessibility purposes. message The color used for rendering incoming Chat Messages ai.botstacks.sdk.ui.components.ChatMessage (not from current user). chatInput The color that affects the background of the ai.botstacks.sdk.ui.components.ChatInput component. onChatInput Color used for text and icons displayed on top of the chatInput color. caption Color used for text and icons that are supplementary in nature (e.g timestamps in chat). success Color used to represent a success state, as well as online statuses when present. error The error color is used to indicate errors in components, as well as the offline statuses when present. onError Color used for text and icons displayed on top of the error color. ripple Color used for click interactions that \"ripple\" behind content. scrim Color of a scrim that obscures content."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/#constructors","title":"Constructors","text":"Colors [common]constructor(isDark: Boolean, primary: Color, onPrimary: Color, header: Color, onHeader: Color, background: Color, onBackground: Color, surface: Color, onSurface: Color, onSurfaceVariant: Color, border: Color, message: Color, onMessage: Color, chatInput: Color, onChatInput: Color, caption: Color, success: Color, onSuccess: Color, error: Color, onError: Color, ripple: Color, scrim: Color)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/#properties","title":"Properties","text":"Name Summary background [common]var background: Color border [common]var border: Color caption [common]var caption: Color chatInput [common]var chatInput: Color error [common]var error: Color header [common]var header: Color isDark [common]var isDark: Boolean message [common]var message: Color onBackground [common]var onBackground: Color onChatInput [common]var onChatInput: Color onError [common]var onError: Color onHeader [common]var onHeader: Color onMessage [common]var onMessage: Color onPrimary [common]var onPrimary: Color onSuccess [common]var onSuccess: Color onSurface [common]var onSurface: Color onSurfaceVariant [common]var onSurfaceVariant: Color primary [common]var primary: Color ripple [common]var ripple: Color scrim [common]var scrim: Color success [common]var success: Color surface [common]var surface: Color"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/#functions","title":"Functions","text":"Name Summary asMaterialColorScheme [common]fun asMaterialColorScheme(): ColorScheme copy [common]fun copy(primary: Color = this.primary, onPrimary: Color = this.onPrimary, header: Color = this.header, onHeader: Color = this.onHeader, background: Color = this.background, onBackground: Color = this.onBackground, surface: Color = this.surface, onSurface: Color = this.onSurface, onSurfaceVariant: Color = this.onSurfaceVariant, border: Color = this.border, message: Color = this.message, onMessage: Color = this.onMessage, chatInput: Color = this.chatInput, onChatInput: Color = this.onChatInput, caption: Color = this.caption, success: Color = this.success, onSuccess: Color = this.onSuccess, error: Color = this.error, onError: Color = this.onError, ripple: Color = this.ripple, scrim: Color = this.scrim): ColorsReturns a copy of this ColorScheme, optionally overriding some of the values."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/-colors/","title":"colors","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/Colors</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/-colors/#colors","title":"Colors","text":"<p>[common]\\ constructor(isDark: Boolean, primary: Color, onPrimary: Color, header: Color, onHeader: Color, background: Color, onBackground: Color, surface: Color, onSurface: Color, onSurfaceVariant: Color, border: Color, message: Color, onMessage: Color, chatInput: Color, onChatInput: Color, caption: Color, success: Color, onSuccess: Color, error: Color, onError: Color, ripple: Color, scrim: Color)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/-colors/#parameters","title":"Parameters","text":"<p>common</p> isDark if this scheme is for Dark mode. primary The primary color is the color displayed most frequently across your app\u2019s screens and components. onPrimary Color used for text and icons displayed on top of the primary color. header The preferred background color for the ai.botstacks.sdk.ui.components.Header component. onHeader Color used for text and icons displayed on top of the header color. background The background color that appears behind scrollable content. onBackground Color used for text and icons displayed on top of the background color. surface The surface color that affect surfaces of components, such as cards, sheets, and menus. onSurface Color used for text and icons displayed on top of the surface color. onSurfaceVariant The color (and state variants) that can be used for content on top of surface. border Subtle color used for boundaries. Outline color role adds contrast for accessibility purposes. message The color used for rendering incoming Chat Messages ai.botstacks.sdk.ui.components.ChatMessage (not from current user). chatInput The color that affects the background of the ai.botstacks.sdk.ui.components.ChatInput component. onChatInput Color used for text and icons displayed on top of the chatInput color. caption Color used for text and icons that are supplementary in nature (e.g timestamps in chat). success Color used to represent a success state, as well as online statuses when present. error The error color is used to indicate errors in components, as well as the offline statuses when present. onError Color used for text and icons displayed on top of the error color. ripple Color used for click interactions that \"ripple\" behind content. scrim Color of a scrim that obscures content."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/as-material-color-scheme/","title":"As material color scheme","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/asMaterialColorScheme</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/as-material-color-scheme/#asmaterialcolorscheme","title":"asMaterialColorScheme","text":"<p>[common]\\ fun asMaterialColorScheme(): ColorScheme</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/background/","title":"Background","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/background</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/background/#background","title":"background","text":"<p>[common]\\ var background: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/border/","title":"Border","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/border</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/border/#border","title":"border","text":"<p>[common]\\ var border: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/caption/","title":"Caption","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/caption</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/caption/#caption","title":"caption","text":"<p>[common]\\ var caption: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/chat-input/","title":"Chat input","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/chatInput</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/chat-input/#chatinput","title":"chatInput","text":"<p>[common]\\ var chatInput: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/copy/","title":"Copy","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/copy</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/copy/#copy","title":"copy","text":"<p>[common]\\ fun copy(primary: Color = this.primary, onPrimary: Color = this.onPrimary, header: Color = this.header, onHeader: Color = this.onHeader, background: Color = this.background, onBackground: Color = this.onBackground, surface: Color = this.surface, onSurface: Color = this.onSurface, onSurfaceVariant: Color = this.onSurfaceVariant, border: Color = this.border, message: Color = this.message, onMessage: Color = this.onMessage, chatInput: Color = this.chatInput, onChatInput: Color = this.onChatInput, caption: Color = this.caption, success: Color = this.success, onSuccess: Color = this.onSuccess, error: Color = this.error, onError: Color = this.onError, ripple: Color = this.ripple, scrim: Color = this.scrim): Colors</p> <p>Returns a copy of this ColorScheme, optionally overriding some of the values.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/error/","title":"Error","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/error</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/error/#error","title":"error","text":"<p>[common]\\ var error: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/header/","title":"Header","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/header</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/header/#header","title":"header","text":"<p>[common]\\ var header: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/is-dark/","title":"Is dark","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/isDark</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/is-dark/#isdark","title":"isDark","text":"<p>[common]\\ var isDark: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/message/","title":"Message","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/message</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/message/#message","title":"message","text":"<p>[common]\\ var message: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-background/","title":"On background","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onBackground</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-background/#onbackground","title":"onBackground","text":"<p>[common]\\ var onBackground: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-chat-input/","title":"On chat input","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onChatInput</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-chat-input/#onchatinput","title":"onChatInput","text":"<p>[common]\\ var onChatInput: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-error/","title":"On error","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onError</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-error/#onerror","title":"onError","text":"<p>[common]\\ var onError: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-header/","title":"On header","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onHeader</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-header/#onheader","title":"onHeader","text":"<p>[common]\\ var onHeader: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-message/","title":"On message","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onMessage</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-message/#onmessage","title":"onMessage","text":"<p>[common]\\ var onMessage: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-primary/","title":"On primary","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onPrimary</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-primary/#onprimary","title":"onPrimary","text":"<p>[common]\\ var onPrimary: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-success/","title":"On success","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onSuccess</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-success/#onsuccess","title":"onSuccess","text":"<p>[common]\\ var onSuccess: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-surface-variant/","title":"On surface variant","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onSurfaceVariant</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-surface-variant/#onsurfacevariant","title":"onSurfaceVariant","text":"<p>[common]\\ var onSurfaceVariant: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-surface/","title":"On surface","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/onSurface</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/on-surface/#onsurface","title":"onSurface","text":"<p>[common]\\ var onSurface: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/primary/","title":"Primary","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/primary</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/primary/#primary","title":"primary","text":"<p>[common]\\ var primary: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/ripple/","title":"Ripple","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/ripple</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/ripple/#ripple","title":"ripple","text":"<p>[common]\\ var ripple: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/scrim/","title":"Scrim","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/scrim</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/scrim/#scrim","title":"scrim","text":"<p>[common]\\ var scrim: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/success/","title":"Success","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/success</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/success/#success","title":"success","text":"<p>[common]\\ var success: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/surface/","title":"Surface","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Colors/surface</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-colors/surface/#surface","title":"surface","text":"<p>[common]\\ var surface: Color</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/#dimensions","title":"Dimensions","text":"<p>class Dimensions(val border: Dp = 1.dp, val thickBorder: Dp = 2.dp, val inset: Dp, val widthWindowSizeClass: WindowWidthSizeClass = WindowWidthSizeClass.Compact, val heightWindowSizeClass: WindowHeightSizeClass = WindowHeightSizeClass.Compact, val imagePreviewSize: Size = Size(width = 178f, height = 152f), val videoPreviewSize: Size = Size(width = 178f, height = 152f), val grid: GridDimensionSet, val staticGrid: GridDimensionSet = staticGridPreset)</p> <p>Dimensions that drive spacing and padding within Components</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/#parameters","title":"Parameters","text":"<p>common</p> border Thickness of a border. thickBorder Thickness of a thick border. inset Spacing from edge of screen to content. widthWindowSizeClass size class for the width of the device. heightWindowSizeClass size class for the height of the device. imagePreviewSize Preview size for image attachments in chat. videoPreviewSize Preview size for video attachments in chat."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/#constructors","title":"Constructors","text":"Dimensions [common]constructor(border: Dp = 1.dp, thickBorder: Dp = 2.dp, inset: Dp, widthWindowSizeClass: WindowWidthSizeClass = WindowWidthSizeClass.Compact, heightWindowSizeClass: WindowHeightSizeClass = WindowHeightSizeClass.Compact, imagePreviewSize: Size = Size(width = 178f, height = 152f), videoPreviewSize: Size = Size(width = 178f, height = 152f), grid: GridDimensionSet, staticGrid: GridDimensionSet = staticGridPreset)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/#properties","title":"Properties","text":"Name Summary border [common]val border: Dp grid [common]val grid: GridDimensionSetMaterial design has grid spacings by 4dp increments for normal use cases This field is dynamically sized based on screen size heightWindowSizeClass [common]val heightWindowSizeClass: WindowHeightSizeClass imagePreviewSize [common]val imagePreviewSize: Size inset [common]val inset: Dp isLargeWidth [common]val isLargeWidth: Boolean isMediumWidth [common]val isMediumWidth: Boolean staticGrid [common]val staticGrid: GridDimensionSetA static grid that is screen size independent based on Material design 4dp spacing thickBorder [common]val thickBorder: Dp videoPreviewSize [common]val videoPreviewSize: Size widthWindowSizeClass [common]val widthWindowSizeClass: WindowWidthSizeClass"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/-dimensions/","title":"dimensions","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/Dimensions</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/-dimensions/#dimensions","title":"Dimensions","text":"<p>[common]\\ constructor(border: Dp = 1.dp, thickBorder: Dp = 2.dp, inset: Dp, widthWindowSizeClass: WindowWidthSizeClass = WindowWidthSizeClass.Compact, heightWindowSizeClass: WindowHeightSizeClass = WindowHeightSizeClass.Compact, imagePreviewSize: Size = Size(width = 178f, height = 152f), videoPreviewSize: Size = Size(width = 178f, height = 152f), grid: GridDimensionSet, staticGrid: GridDimensionSet = staticGridPreset)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/-dimensions/#parameters","title":"Parameters","text":"<p>common</p> border Thickness of a border. thickBorder Thickness of a thick border. inset Spacing from edge of screen to content. widthWindowSizeClass size class for the width of the device. heightWindowSizeClass size class for the height of the device. imagePreviewSize Preview size for image attachments in chat. videoPreviewSize Preview size for video attachments in chat."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/border/","title":"Border","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/border</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/border/#border","title":"border","text":"<p>[common]\\ val border: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/border/#parameters","title":"Parameters","text":"<p>common</p> border Thickness of a border."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/grid/","title":"Grid","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/grid</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/grid/#grid","title":"grid","text":"<p>[common]\\ val grid: GridDimensionSet</p> <p>Material design has grid spacings by 4dp increments for normal use cases This field is dynamically sized based on screen size</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/height-window-size-class/","title":"Height window size class","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/heightWindowSizeClass</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/height-window-size-class/#heightwindowsizeclass","title":"heightWindowSizeClass","text":"<p>[common]\\ val heightWindowSizeClass: WindowHeightSizeClass</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/height-window-size-class/#parameters","title":"Parameters","text":"<p>common</p> heightWindowSizeClass size class for the height of the device."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/image-preview-size/","title":"Image preview size","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/imagePreviewSize</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/image-preview-size/#imagepreviewsize","title":"imagePreviewSize","text":"<p>[common]\\ val imagePreviewSize: Size</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/image-preview-size/#parameters","title":"Parameters","text":"<p>common</p> imagePreviewSize Preview size for image attachments in chat."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/inset/","title":"Inset","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/inset</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/inset/#inset","title":"inset","text":"<p>[common]\\ val inset: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/inset/#parameters","title":"Parameters","text":"<p>common</p> inset Spacing from edge of screen to content."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/is-large-width/","title":"Is large width","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/isLargeWidth</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/is-large-width/#islargewidth","title":"isLargeWidth","text":"<p>[common]\\ val isLargeWidth: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/is-medium-width/","title":"Is medium width","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/isMediumWidth</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/is-medium-width/#ismediumwidth","title":"isMediumWidth","text":"<p>[common]\\ val isMediumWidth: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/static-grid/","title":"Static grid","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/staticGrid</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/static-grid/#staticgrid","title":"staticGrid","text":"<p>[common]\\ val staticGrid: GridDimensionSet</p> <p>A static grid that is screen size independent based on Material design 4dp spacing</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/thick-border/","title":"Thick border","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/thickBorder</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/thick-border/#thickborder","title":"thickBorder","text":"<p>[common]\\ val thickBorder: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/thick-border/#parameters","title":"Parameters","text":"<p>common</p> thickBorder Thickness of a thick border."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/video-preview-size/","title":"Video preview size","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/videoPreviewSize</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/video-preview-size/#videopreviewsize","title":"videoPreviewSize","text":"<p>[common]\\ val videoPreviewSize: Size</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/video-preview-size/#parameters","title":"Parameters","text":"<p>common</p> videoPreviewSize Preview size for video attachments in chat."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/width-window-size-class/","title":"Width window size class","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Dimensions/widthWindowSizeClass</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/width-window-size-class/#widthwindowsizeclass","title":"widthWindowSizeClass","text":"<p>[common]\\ val widthWindowSizeClass: WindowWidthSizeClass</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-dimensions/width-window-size-class/#parameters","title":"Parameters","text":"<p>common</p> widthWindowSizeClass size class for the width of the device."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/#emptyscreenconfig","title":"EmptyScreenConfig","text":"<p>sealed class EmptyScreenConfig(val image: @Composable() -&gt; ImageAsset? = { null }, val caption: String? = null, val type: EmptyScreenType)</p> <p>Configuration for an empty state</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/#parameters","title":"Parameters","text":"<p>common</p> image Image to be display above caption, if provided. caption Text to be displayed below image, if provided. type The EmptyScreenType for this configuration."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/#inheritors","title":"Inheritors","text":"Chats Messages"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/#constructors","title":"Constructors","text":"EmptyScreenConfig [common]protected constructor(image: @Composable() -&gt; ImageAsset? = { null }, caption: String? = null, type: EmptyScreenType)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/#types","title":"Types","text":"Name Summary Chats [common]data class Chats(val image: @Composable() -&gt; ImageAsset? = { null }, val caption: String? = null) : EmptyScreenConfig Messages [common]data class Messages(val image: @Composable() -&gt; ImageAsset? = { null }, val caption: String? = null) : EmptyScreenConfig"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/#properties","title":"Properties","text":"Name Summary caption [common]open val caption: String? = null image [common]open val image: @Composable() -&gt; ImageAsset? type [common]open val type: EmptyScreenType"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-empty-screen-config/","title":"empty screen config","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/EmptyScreenConfig</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-empty-screen-config/#emptyscreenconfig","title":"EmptyScreenConfig","text":"<p>[common]\\ protected constructor(image: @Composable() -&gt; ImageAsset? = { null }, caption: String? = null, type: EmptyScreenType)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-empty-screen-config/#parameters","title":"Parameters","text":"<p>common</p> image Image to be display above caption, if provided. caption Text to be displayed below image, if provided. type The EmptyScreenType for this configuration."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/caption/","title":"Caption","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/caption</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/caption/#caption","title":"caption","text":"<p>[common]\\ open val caption: String? = null</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/caption/#parameters","title":"Parameters","text":"<p>common</p> caption Text to be displayed below image, if provided."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/image/","title":"Image","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/image</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/image/#image","title":"image","text":"<p>[common]\\ open val image: @Composable() -&gt; ImageAsset?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/image/#parameters","title":"Parameters","text":"<p>common</p> image Image to be display above caption, if provided."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/type/","title":"Type","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/type</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/type/#type","title":"type","text":"<p>[common]\\ open val type: EmptyScreenType</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/type/#parameters","title":"Parameters","text":"<p>common</p> type The EmptyScreenType for this configuration."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/Chats</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/#chats","title":"Chats","text":"<p>[common]\\ data class Chats(val image: @Composable() -&gt; ImageAsset? = { null }, val caption: String? = null) : EmptyScreenConfig</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/#constructors","title":"Constructors","text":"Chats [common]constructor(image: @Composable() -&gt; ImageAsset? = { null }, caption: String? = null)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/#properties","title":"Properties","text":"Name Summary caption [common]open override val caption: String? = null image [common]open override val image: @Composable() -&gt; ImageAsset?"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/-chats/","title":"chats","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/Chats/Chats</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/-chats/#chats","title":"Chats","text":"<p>[common]\\ constructor(image: @Composable() -&gt; ImageAsset? = { null }, caption: String? = null)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/caption/","title":"Caption","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/Chats/caption</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/caption/#caption","title":"caption","text":"<p>[common]\\ open override val caption: String? = null</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/caption/#parameters","title":"Parameters","text":"<p>common</p> caption Text to be displayed below image, if provided."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/image/","title":"Image","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/Chats/image</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/image/#image","title":"image","text":"<p>[common]\\ open override val image: @Composable() -&gt; ImageAsset?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-chats/image/#parameters","title":"Parameters","text":"<p>common</p> image Image to be display above caption, if provided."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/Messages</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/#messages","title":"Messages","text":"<p>[common]\\ data class Messages(val image: @Composable() -&gt; ImageAsset? = { null }, val caption: String? = null) : EmptyScreenConfig</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/#constructors","title":"Constructors","text":"Messages [common]constructor(image: @Composable() -&gt; ImageAsset? = { null }, caption: String? = null)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/#properties","title":"Properties","text":"Name Summary caption [common]open override val caption: String? = null image [common]open override val image: @Composable() -&gt; ImageAsset?"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/-messages/","title":"messages","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/Messages/Messages</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/-messages/#messages","title":"Messages","text":"<p>[common]\\ constructor(image: @Composable() -&gt; ImageAsset? = { null }, caption: String? = null)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/caption/","title":"Caption","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/Messages/caption</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/caption/#caption","title":"caption","text":"<p>[common]\\ open override val caption: String? = null</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/caption/#parameters","title":"Parameters","text":"<p>common</p> caption Text to be displayed below image, if provided."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/image/","title":"Image","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenConfig/Messages/image</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/image/#image","title":"image","text":"<p>[common]\\ open override val image: @Composable() -&gt; ImageAsset?</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-config/-messages/image/#parameters","title":"Parameters","text":"<p>common</p> image Image to be display above caption, if provided."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-type/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenType</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-type/#emptyscreentype","title":"EmptyScreenType","text":"<p>interface EmptyScreenType</p> <p>Type determination for empty states for certain components</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-type/#inheritors","title":"Inheritors","text":"Messages Chats"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-type/#types","title":"Types","text":"Name Summary Chats [common]data object Chats : EmptyScreenTypeEmpty state for chat list (no chats) Messages [common]data object Messages : EmptyScreenTypeEmpty state for within a chat (no messages)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-type/-chats/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenType/Chats</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-type/-chats/#chats","title":"Chats","text":"<p>[common]\\ data object Chats : EmptyScreenType</p> <p>Empty state for chat list (no chats)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-type/-messages/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/EmptyScreenType/Messages</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-empty-screen-type/-messages/#messages","title":"Messages","text":"<p>[common]\\ data object Messages : EmptyScreenType</p> <p>Empty state for within a chat (no messages)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/#fontstyle","title":"FontStyle","text":"<p>[common]\\ @Stable</p> <p>data class FontStyle(val size: TextUnit = 14.sp, val weight: FontWeight = FontWeight.Normal, val family: FontFamily = FontFamily.Default, val textAlign: TextAlign = TextAlign.Unspecified)</p> <p>A Font \"style\" that drives our Fonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/#constructors","title":"Constructors","text":"FontStyle [common]constructor(size: TextUnit = 14.sp, weight: FontWeight = FontWeight.Normal, family: FontFamily = FontFamily.Default, textAlign: TextAlign = TextAlign.Unspecified)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/#properties","title":"Properties","text":"Name Summary family [common]val family: FontFamily size [common]val size: TextUnit textAlign [common]val textAlign: TextAlign weight [common]val weight: FontWeight"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/#functions","title":"Functions","text":"Name Summary asTextStyle [common]@Composablefun asTextStyle(): TextStyle"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/-font-style/","title":"font style","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/FontStyle/FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/-font-style/#fontstyle","title":"FontStyle","text":"<p>[common]\\ constructor(size: TextUnit = 14.sp, weight: FontWeight = FontWeight.Normal, family: FontFamily = FontFamily.Default, textAlign: TextAlign = TextAlign.Unspecified)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/as-text-style/","title":"As text style","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/FontStyle/asTextStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/as-text-style/#astextstyle","title":"asTextStyle","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun asTextStyle(): TextStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/family/","title":"Family","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/FontStyle/family</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/family/#family","title":"family","text":"<p>[common]\\ val family: FontFamily</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/size/","title":"Size","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/FontStyle/size</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/size/#size","title":"size","text":"<p>[common]\\ val size: TextUnit</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/text-align/","title":"Text align","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/FontStyle/textAlign</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/text-align/#textalign","title":"textAlign","text":"<p>[common]\\ val textAlign: TextAlign</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/weight/","title":"Weight","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/FontStyle/weight</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-font-style/weight/#weight","title":"weight","text":"<p>[common]\\ val weight: FontWeight</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/#fonts","title":"Fonts","text":"<p>@Stable</p> <p>class Fonts(val h1: FontStyle, val h2: FontStyle, val h3: FontStyle, val body1: FontStyle, val body2: FontStyle, val label1: FontStyle, val label2: FontStyle, val button1: FontStyle, val button2: FontStyle, val caption1: FontStyle, val caption2: FontStyle)</p> <p>Typography system for our Components.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/#parameters","title":"Parameters","text":"<p>common</p> h1 h1 is the largest headline, reserved for short, important text or numerals. h2 h2 is the second largest headline, reserved for short, important text or numerals. h3 h3 is the third largest headline, reserved for short, important text or numerals. body1 body1 is the largest body, and is typically used for long-form writing as it works well for small text sizes. body2 body2 is the smallest body, and is typically used for long-form writing as it works well for small text sizes. label1 label is the largest label, and is typically reserved for medium-emphasis text that is shorter in length. label2 label2 is the smallest label, and is typically reserved for medium-emphasis text that is shorter in length. caption1 caption1 is the largest caption, and it is used sparingly to annotate imagery or to introduce a headline. caption2 caption1 is the largest caption, and it is used sparingly to annotate imagery or to introduce a headline."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/#constructors","title":"Constructors","text":"Fonts [common]constructor(h1: FontStyle, h2: FontStyle, h3: FontStyle, body1: FontStyle, body2: FontStyle, label1: FontStyle, label2: FontStyle, button1: FontStyle, button2: FontStyle, caption1: FontStyle, caption2: FontStyle)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/#properties","title":"Properties","text":"Name Summary body1 [common]val body1: FontStyle body2 [common]val body2: FontStyle button1 [common]val button1: FontStyle button2 [common]val button2: FontStyle caption1 [common]val caption1: FontStyle caption2 [common]val caption2: FontStyle h1 [common]val h1: FontStyle h2 [common]val h2: FontStyle h3 [common]val h3: FontStyle label1 [common]val label1: FontStyle label2 [common]val label2: FontStyle"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/#functions","title":"Functions","text":"Name Summary copy [common]fun copy(h1: FontStyle = this.h1, h2: FontStyle = this.h2, h3: FontStyle = this.h3, body1: FontStyle = this.body1, body2: FontStyle = this.body2, label1: FontStyle = this.label1, label2: FontStyle = this.label2, button1: FontStyle = this.button1, button2: FontStyle = this.button2, caption1: FontStyle = this.caption1, caption2: FontStyle = this.caption2): Fonts merge [common]@Stablefun merge(other: Fonts? = null): Fonts"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/-fonts/","title":"fonts","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/Fonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/-fonts/#fonts","title":"Fonts","text":"<p>[common]\\ constructor(h1: FontStyle, h2: FontStyle, h3: FontStyle, body1: FontStyle, body2: FontStyle, label1: FontStyle, label2: FontStyle, button1: FontStyle, button2: FontStyle, caption1: FontStyle, caption2: FontStyle)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/-fonts/#parameters","title":"Parameters","text":"<p>common</p> h1 h1 is the largest headline, reserved for short, important text or numerals. h2 h2 is the second largest headline, reserved for short, important text or numerals. h3 h3 is the third largest headline, reserved for short, important text or numerals. body1 body1 is the largest body, and is typically used for long-form writing as it works well for small text sizes. body2 body2 is the smallest body, and is typically used for long-form writing as it works well for small text sizes. label1 label is the largest label, and is typically reserved for medium-emphasis text that is shorter in length. label2 label2 is the smallest label, and is typically reserved for medium-emphasis text that is shorter in length. caption1 caption1 is the largest caption, and it is used sparingly to annotate imagery or to introduce a headline. caption2 caption1 is the largest caption, and it is used sparingly to annotate imagery or to introduce a headline."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/body1/","title":"Body1","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/body1</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/body1/#body1","title":"body1","text":"<p>[common]\\ val body1: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/body1/#parameters","title":"Parameters","text":"<p>common</p> body1 body1 is the largest body, and is typically used for long-form writing as it works well for small text sizes."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/body2/","title":"Body2","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/body2</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/body2/#body2","title":"body2","text":"<p>[common]\\ val body2: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/body2/#parameters","title":"Parameters","text":"<p>common</p> body2 body2 is the smallest body, and is typically used for long-form writing as it works well for small text sizes."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/button1/","title":"Button1","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/button1</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/button1/#button1","title":"button1","text":"<p>[common]\\ val button1: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/button2/","title":"Button2","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/button2</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/button2/#button2","title":"button2","text":"<p>[common]\\ val button2: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/caption1/","title":"Caption1","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/caption1</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/caption1/#caption1","title":"caption1","text":"<p>[common]\\ val caption1: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/caption1/#parameters","title":"Parameters","text":"<p>common</p> caption1 caption1 is the largest caption, and it is used sparingly to annotate imagery or to introduce a headline."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/caption2/","title":"Caption2","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/caption2</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/caption2/#caption2","title":"caption2","text":"<p>[common]\\ val caption2: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/caption2/#parameters","title":"Parameters","text":"<p>common</p> caption2 caption1 is the largest caption, and it is used sparingly to annotate imagery or to introduce a headline."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/copy/","title":"Copy","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/copy</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/copy/#copy","title":"copy","text":"<p>[common]\\ fun copy(h1: FontStyle = this.h1, h2: FontStyle = this.h2, h3: FontStyle = this.h3, body1: FontStyle = this.body1, body2: FontStyle = this.body2, label1: FontStyle = this.label1, label2: FontStyle = this.label2, button1: FontStyle = this.button1, button2: FontStyle = this.button2, caption1: FontStyle = this.caption1, caption2: FontStyle = this.caption2): Fonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h1/","title":"H1","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/h1</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h1/#h1","title":"h1","text":"<p>[common]\\ val h1: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h1/#parameters","title":"Parameters","text":"<p>common</p> h1 h1 is the largest headline, reserved for short, important text or numerals."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h2/","title":"H2","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/h2</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h2/#h2","title":"h2","text":"<p>[common]\\ val h2: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h2/#parameters","title":"Parameters","text":"<p>common</p> h2 h2 is the second largest headline, reserved for short, important text or numerals."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h3/","title":"H3","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/h3</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h3/#h3","title":"h3","text":"<p>[common]\\ val h3: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/h3/#parameters","title":"Parameters","text":"<p>common</p> h3 h3 is the third largest headline, reserved for short, important text or numerals."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/label1/","title":"Label1","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/label1</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/label1/#label1","title":"label1","text":"<p>[common]\\ val label1: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/label1/#parameters","title":"Parameters","text":"<p>common</p> label1 label is the largest label, and is typically reserved for medium-emphasis text that is shorter in length."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/label2/","title":"Label2","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/label2</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/label2/#label2","title":"label2","text":"<p>[common]\\ val label2: FontStyle</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/label2/#parameters","title":"Parameters","text":"<p>common</p> label2 label2 is the smallest label, and is typically reserved for medium-emphasis text that is shorter in length."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/merge/","title":"Merge","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/Fonts/merge</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-fonts/merge/#merge","title":"merge","text":"<p>[common]\\</p> <p>@Stable</p> <p>fun merge(other: Fonts? = null): Fonts</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/#griddimensionset","title":"GridDimensionSet","text":"<p>[common]\\ data class GridDimensionSet(val x1: Dp, val x2: Dp, val x3: Dp, val x4: Dp, val x5: Dp, val x6: Dp, val x7: Dp, val x8: Dp, val x9: Dp, val x10: Dp, val x11: Dp, val x12: Dp, val x13: Dp, val x14: Dp, val x15: Dp, val x16: Dp)</p> <p>Grid dimension set for proper UI scaling.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/#constructors","title":"Constructors","text":"GridDimensionSet [common]constructor(x1: Dp, x2: Dp, x3: Dp, x4: Dp, x5: Dp, x6: Dp, x7: Dp, x8: Dp, x9: Dp, x10: Dp, x11: Dp, x12: Dp, x13: Dp, x14: Dp, x15: Dp, x16: Dp)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/#properties","title":"Properties","text":"Name Summary x1 [common]val x1: Dp x10 [common]val x10: Dp x11 [common]val x11: Dp x12 [common]val x12: Dp x13 [common]val x13: Dp x14 [common]val x14: Dp x15 [common]val x15: Dp x16 [common]val x16: Dp x2 [common]val x2: Dp x3 [common]val x3: Dp x4 [common]val x4: Dp x5 [common]val x5: Dp x6 [common]val x6: Dp x7 [common]val x7: Dp x8 [common]val x8: Dp x9 [common]val x9: Dp"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/-grid-dimension-set/","title":"grid dimension set","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/GridDimensionSet</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/-grid-dimension-set/#griddimensionset","title":"GridDimensionSet","text":"<p>[common]\\ constructor(x1: Dp, x2: Dp, x3: Dp, x4: Dp, x5: Dp, x6: Dp, x7: Dp, x8: Dp, x9: Dp, x10: Dp, x11: Dp, x12: Dp, x13: Dp, x14: Dp, x15: Dp, x16: Dp)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x1/","title":"X1","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x1</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x1/#x1","title":"x1","text":"<p>[common]\\ val x1: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x10/","title":"X10","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x10</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x10/#x10","title":"x10","text":"<p>[common]\\ val x10: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x11/","title":"X11","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x11</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x11/#x11","title":"x11","text":"<p>[common]\\ val x11: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x12/","title":"X12","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x12</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x12/#x12","title":"x12","text":"<p>[common]\\ val x12: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x13/","title":"X13","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x13</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x13/#x13","title":"x13","text":"<p>[common]\\ val x13: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x14/","title":"X14","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x14</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x14/#x14","title":"x14","text":"<p>[common]\\ val x14: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x15/","title":"X15","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x15</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x15/#x15","title":"x15","text":"<p>[common]\\ val x15: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x16/","title":"X16","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x16</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x16/#x16","title":"x16","text":"<p>[common]\\ val x16: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x2/","title":"X2","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x2</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x2/#x2","title":"x2","text":"<p>[common]\\ val x2: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x3/","title":"X3","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x3</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x3/#x3","title":"x3","text":"<p>[common]\\ val x3: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x4/","title":"X4","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x4</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x4/#x4","title":"x4","text":"<p>[common]\\ val x4: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x5/","title":"X5","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x5</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x5/#x5","title":"x5","text":"<p>[common]\\ val x5: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x6/","title":"X6","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x6</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x6/#x6","title":"x6","text":"<p>[common]\\ val x6: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x7/","title":"X7","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x7</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x7/#x7","title":"x7","text":"<p>[common]\\ val x7: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x8/","title":"X8","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x8</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x8/#x8","title":"x8","text":"<p>[common]\\ val x8: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x9/","title":"X9","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/GridDimensionSet/x9</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-grid-dimension-set/x9/#x9","title":"x9","text":"<p>[common]\\ val x9: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-image-asset/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/ImageAsset</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-image-asset/#imageasset","title":"ImageAsset","text":"<p>[common]\\ expect class ImageAsset</p> <p>[android]\\ actual typealias ImageAsset = ImageVector</p> <p>Image asset type. ImageVector for Android</p> <p>[ios]\\ actual typealias ImageAsset = UIImage</p> <p>Image asset type. UIImage for iOS</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-image-asset-identifier/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/ImageAssetIdentifier</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-image-asset-identifier/#imageassetidentifier","title":"ImageAssetIdentifier","text":"<p>[common]\\ expect class ImageAssetIdentifier</p> <p>[android]\\ actual typealias ImageAssetIdentifier = Int</p> <p>Image asset identifier. This is the drawable resource ID on Android.</p> <p>[ios]\\ actual typealias ImageAssetIdentifier = String</p> <p>Image asset identifier. This is the string asset name normally used in iOS.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/ShapeDefinitions</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/#shapedefinitions","title":"ShapeDefinitions","text":"<p>data class ShapeDefinitions(val small: Dp = 6.dp, val medium: Dp = 10.dp, val large: Dp = 20.dp)</p> <p>Shape definitions for Components.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/#parameters","title":"Parameters","text":"<p>common</p> small A shape style with 4 same-sized corners whose size are bigger than RectangleShape and smaller than Shapes.medium. medium A shape style with 4 same-sized corners whose size are bigger than Shapes.small and smaller than Shapes.large. large A shape style with 4 same-sized corners whose size are bigger than Shapes.medium and smaller than CircleShape."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/#constructors","title":"Constructors","text":"ShapeDefinitions [common]constructor(small: Dp = 6.dp, medium: Dp = 10.dp, large: Dp = 20.dp)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/#properties","title":"Properties","text":"Name Summary large [common]val large: Dp medium [common]val medium: Dp small [common]val small: Dp"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/-shape-definitions/","title":"shape definitions","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/ShapeDefinitions/ShapeDefinitions</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/-shape-definitions/#shapedefinitions","title":"ShapeDefinitions","text":"<p>[common]\\ constructor(small: Dp = 6.dp, medium: Dp = 10.dp, large: Dp = 20.dp)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/-shape-definitions/#parameters","title":"Parameters","text":"<p>common</p> small A shape style with 4 same-sized corners whose size are bigger than RectangleShape and smaller than Shapes.medium. medium A shape style with 4 same-sized corners whose size are bigger than Shapes.small and smaller than Shapes.large. large A shape style with 4 same-sized corners whose size are bigger than Shapes.medium and smaller than CircleShape."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/large/","title":"Large","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/ShapeDefinitions/large</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/large/#large","title":"large","text":"<p>[common]\\ val large: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/large/#parameters","title":"Parameters","text":"<p>common</p> large A shape style with 4 same-sized corners whose size are bigger than Shapes.medium and smaller than CircleShape."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/medium/","title":"Medium","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/ShapeDefinitions/medium</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/medium/#medium","title":"medium","text":"<p>[common]\\ val medium: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/medium/#parameters","title":"Parameters","text":"<p>common</p> medium A shape style with 4 same-sized corners whose size are bigger than Shapes.small and smaller than Shapes.large."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/small/","title":"Small","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.theme/ShapeDefinitions/small</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/small/#small","title":"small","text":"<p>[common]\\ val small: Dp</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.theme/-shape-definitions/small/#parameters","title":"Parameters","text":"<p>common</p> small A shape style with 4 same-sized corners whose size are bigger than RectangleShape and smaller than Shapes.medium."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/#types","title":"Types","text":"Name Summary ChannelSettingsState [common]@Stableclass ChannelSettingsState(chat: Chat)ChannelSettingsState ChannelUserSelectionState [common]@Stableclass ChannelUserSelectionState(var selections: SnapshotStateList&lt;User&gt; = mutableStateListOf()) CreateChannelState [common]@Stableclass CreateChannelStateCreateChannelState EditProfileState [common]@Stableclass EditProfileStateEditProfileState UserDetailsState [common]class UserDetailsState(user: User)UserDetailsState"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/#functions","title":"Functions","text":"Name Summary ChannelSettingsView [common]@Composablefun ChannelSettingsView(state: ChannelSettingsState, onAddUsers: () -&gt; Unit)ChannelSettingsView CreateChannelView [common]@Composablefun CreateChannelView(state: CreateChannelState, onSelectUsers: () -&gt; Unit)CreateChannelView EditProfileView [common]@Composablefun EditProfileView(state: EditProfileState)EditProfileView SelectChannelUsersView [common]@Composablefun SelectChannelUsersView(state: ChannelUserSelectionState)SelectChannelUsersView UserDetailsView [common]@Composablefun UserDetailsView(state: UserDetailsState)UserDetailsView"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-view/","title":"channel settings view","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelSettingsView</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-view/#channelsettingsview","title":"ChannelSettingsView","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun ChannelSettingsView(state: ChannelSettingsState, onAddUsers: () -&gt; Unit)</p> <p>ChannelSettingsView</p> <p>A screen content view for displaying settings and details for a given Chat channel.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-view/#parameters","title":"Parameters","text":"<p>common</p> state The state for the view onAddUsers Callback when the add users icon button is clicked within the User select component."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-view/","title":"create channel view","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/CreateChannelView</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-view/#createchannelview","title":"CreateChannelView","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun CreateChannelView(state: CreateChannelState, onSelectUsers: () -&gt; Unit)</p> <p>CreateChannelView</p> <p>A screen content view for creating a new Channel.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-view/#parameters","title":"Parameters","text":"<p>common</p> state The state for the view onSelectUsers Callback when the add users icon button is clicked within the User select component. Use this to navigate to a new screen where a user will select participants for this new channel"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-view/#see-also","title":"See also","text":"SelectChannelUsersConnectingView"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-view/","title":"edit profile view","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/EditProfileView</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-view/#editprofileview","title":"EditProfileView","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun EditProfileView(state: EditProfileState)</p> <p>EditProfileView</p> <p>A screen content view for editing the current user.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-view/#parameters","title":"Parameters","text":"<p>common</p> state The state for the view"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-select-channel-users-view/","title":"select channel users view","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/SelectChannelUsersView</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-select-channel-users-view/#selectchannelusersview","title":"SelectChannelUsersView","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun SelectChannelUsersView(state: ChannelUserSelectionState)</p> <p>SelectChannelUsersView</p> <p>A screen content view for selecting users within a channel. This is used in coordination with either a CreateChannelView or a ChannelSettingsView to set or update the users in a given channel.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-select-channel-users-view/#parameters","title":"Parameters","text":"<p>common</p> state the state holding the selected users for this view."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-user-details-view/","title":"user details view","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/UserDetailsView</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-user-details-view/#userdetailsview","title":"UserDetailsView","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun UserDetailsView(state: UserDetailsState)</p> <p>UserDetailsView</p> <p>A screen content view for displaying details about a given User.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-user-details-view/#parameters","title":"Parameters","text":"<p>common</p> state the state for this details view."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelSettingsState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/#channelsettingsstate","title":"ChannelSettingsState","text":"<p>@Stable</p> <p>class ChannelSettingsState(chat: Chat)</p> <p>ChannelSettingsState</p> <p>State holder for a given Chat channel, used specifically within the ChannelSettingsView.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/#parameters","title":"Parameters","text":"<p>common</p> chat The channel to initialize this state holder with.To trigger an update/save once modifications are done within the view, simply call update. This will return a Result with the updated chat if successful, or the error if it fails. While the save action is waiting for a result saving will be true.Resulting changes are persisted internally and do not need to be saved manually."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/#constructors","title":"Constructors","text":"ChannelSettingsState [common]constructor(chat: Chat)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/#properties","title":"Properties","text":"Name Summary saving [common]var saving: Boolean"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/#functions","title":"Functions","text":"Name Summary toggleMute [common]fun toggleMute() update [common]suspend fun update(): Result&lt;Chat?&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/-channel-settings-state/","title":"channel settings state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelSettingsState/ChannelSettingsState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/-channel-settings-state/#channelsettingsstate","title":"ChannelSettingsState","text":"<p>[common]\\ constructor(chat: Chat)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/-channel-settings-state/#parameters","title":"Parameters","text":"<p>common</p> chat The channel to initialize this state holder with.To trigger an update/save once modifications are done within the view, simply call update. This will return a Result with the updated chat if successful, or the error if it fails. While the save action is waiting for a result saving will be true.Resulting changes are persisted internally and do not need to be saved manually."},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/saving/","title":"Saving","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelSettingsState/saving</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/saving/#saving","title":"saving","text":"<p>[common]\\ var saving: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/toggle-mute/","title":"Toggle mute","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelSettingsState/toggleMute</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/toggle-mute/#togglemute","title":"toggleMute","text":"<p>[common]\\ fun toggleMute()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/update/","title":"Update","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelSettingsState/update</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-settings-state/update/#update","title":"update","text":"<p>[common]\\ suspend fun update(): Result&lt;Chat?&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelUserSelectionState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/#channeluserselectionstate","title":"ChannelUserSelectionState","text":"<p>[common]\\ @Stable</p> <p>class ChannelUserSelectionState(var selections: SnapshotStateList&lt;User&gt; = mutableStateListOf())</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/#constructors","title":"Constructors","text":"ChannelUserSelectionState [common]constructor(chat: Chat)constructor(selections: SnapshotStateList&lt;User&gt; = mutableStateListOf())"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/#properties","title":"Properties","text":"Name Summary selections [common]var selections: SnapshotStateList&lt;User&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/#functions","title":"Functions","text":"Name Summary addUser [common]fun addUser(user: User) removeUser [common]fun removeUser(user: User)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/-channel-user-selection-state/","title":"channel user selection state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelUserSelectionState/ChannelUserSelectionState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/-channel-user-selection-state/#channeluserselectionstate","title":"ChannelUserSelectionState","text":"<p>[common]\\ constructor(chat: Chat)</p> <p>constructor(selections: SnapshotStateList&lt;User&gt; = mutableStateListOf())</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/add-user/","title":"Add user","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelUserSelectionState/addUser</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/add-user/#adduser","title":"addUser","text":"<p>[common]\\ fun addUser(user: User)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/remove-user/","title":"Remove user","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelUserSelectionState/removeUser</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/remove-user/#removeuser","title":"removeUser","text":"<p>[common]\\ fun removeUser(user: User)</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/selections/","title":"Selections","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/ChannelUserSelectionState/selections</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-channel-user-selection-state/selections/#selections","title":"selections","text":"<p>[common]\\ var selections: SnapshotStateList&lt;User&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/CreateChannelState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/#createchannelstate","title":"CreateChannelState","text":"<p>[common]\\ @Stable</p> <p>class CreateChannelState</p> <p>CreateChannelState</p> <p>State holder for creating a channel, used specifically within the CreateChannelView.</p> <p>To trigger a channel creation once modifications are done within the view, simply call create. This will return a Result with the created chat if successful, or the error if it fails. While the create action is waiting for a result saving will be true.</p> <p>Resulting changes are persisted internally and do not need to be saved manually.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/#constructors","title":"Constructors","text":"CreateChannelState [common]constructor()"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/#properties","title":"Properties","text":"Name Summary saving [common]var saving: Boolean"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/#functions","title":"Functions","text":"Name Summary create [common]suspend fun create(): Result&lt;Chat?&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/-create-channel-state/","title":"create channel state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/CreateChannelState/CreateChannelState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/-create-channel-state/#createchannelstate","title":"CreateChannelState","text":"<p>[common]\\ constructor()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/create/","title":"Create","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/CreateChannelState/create</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/create/#create","title":"create","text":"<p>[common]\\ suspend fun create(): Result&lt;Chat?&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/saving/","title":"Saving","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/CreateChannelState/saving</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-create-channel-state/saving/#saving","title":"saving","text":"<p>[common]\\ var saving: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/EditProfileState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/#editprofilestate","title":"EditProfileState","text":"<p>[common]\\ @Stable</p> <p>class EditProfileState</p> <p>EditProfileState</p> <p>State holder for editing the current user, used specifically within the EditProfileView.</p> <p>To trigger an update once modifications are done within the view, simply call update. This will return a Result with the updated User if successful, or the error if it fails. While the create action is waiting for a result saving will be true.</p> <p>Resulting changes are persisted internally and do not need to be saved manually.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/#constructors","title":"Constructors","text":"EditProfileState [common]constructor()"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/#properties","title":"Properties","text":"Name Summary saving [common]var saving: Boolean"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/#functions","title":"Functions","text":"Name Summary update [common]suspend fun update(): Result&lt;User?&gt;"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/-edit-profile-state/","title":"edit profile state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/EditProfileState/EditProfileState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/-edit-profile-state/#editprofilestate","title":"EditProfileState","text":"<p>[common]\\ constructor()</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/saving/","title":"Saving","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/EditProfileState/saving</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/saving/#saving","title":"saving","text":"<p>[common]\\ var saving: Boolean</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/update/","title":"Update","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/EditProfileState/update</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-edit-profile-state/update/#update","title":"update","text":"<p>[common]\\ suspend fun update(): Result&lt;User?&gt;</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-user-details-state/","title":"Index","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/UserDetailsState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-user-details-state/#userdetailsstate","title":"UserDetailsState","text":"<p>[common]\\ class UserDetailsState(user: User)</p> <p>UserDetailsState</p> <p>State holder for displaying details about a User, used specifically within the UserDetailsView.</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-user-details-state/#constructors","title":"Constructors","text":"UserDetailsState [common]constructor(user: User)"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-user-details-state/-user-details-state/","title":"user details state","text":"<p>//BotStacks Chat SDK/ai.botstacks.sdk.ui.views/UserDetailsState/UserDetailsState</p>"},{"location":"api/-bot-stacks%20-chat%20-s-d-k/ai.botstacks.sdk.ui.views/-user-details-state/-user-details-state/#userdetailsstate","title":"UserDetailsState","text":"<p>[common]\\ constructor(user: User)</p>"},{"location":"compose/components/","title":"Android Components","text":"<p>Our SDK at BotStacks also allows for direct component usage in your Jetpack Compose applications.</p> <p>Outlined below are the components currently available and examples on how to use them.</p> <ul> <li>Avatar</li> <li>Badge</li> <li>ChannelGroup</li> <li>ChannelRow</li> <li>ChatInput</li> <li>ChatList</li> <li>ChatMessage</li> <li>ChatMessagePreview</li> <li>Header</li> <li>MediaActionSheet</li> <li>MessageActionSheet</li> <li>MessageList</li> <li>Spinner</li> <li>UserProfile</li> <li>UserSelect</li> </ul>"},{"location":"compose/components/#avatar","title":"Avatar","text":"<p>Our Avatar component renders an image for a given URL in a bordered circle at the specified size. This is utilized in our larger components to render user Avatars (as the component name claims).</p> <p>There are a few overload methods for this component dependent on your usage.</p> <p><pre><code>Avatar(user = message.user)\nAvatar(url = chat.displayImage, size = AvatarSize.Large, chat = true)\nAvatar(type = AvatarType.Channel(listOf(chat.displayImage)))\nAvatar(type = AvatarType.User(user))\n</code></pre> Avatar sizing resolves around two defined sizes, with the ability to define a custom size.</p> <p><code>AvatarSize.Small</code> - renders at 50 dp</p> <p><code>AvatarSize.Large</code> - renders at 100 dp</p> <p><code>AvatarSize.Custom(val dp: Dp)</code> - renders at specified size</p> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#badge","title":"Badge","text":"<p>Our Badge component renders a \"badge\" that can either take in a <code>Int</code> count or a <code>String</code> label. This is utilized in the MessageList component serving as the date separators, in the ChatList component to show unread counts, and in the ChannelSettingsView for displaying admins.</p> <p>There are a few overload methods for this component dependent on your usage and level of customization needs.</p> <pre><code>Badge(count = 1) // renders a Badge with the number 1\nBadge(count = 101) // renders a Badge with 99+\nBadge(label = \"Admin\")\nBadge(label = \"Power User\", backgroundColor = Color.Green)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#channelgroup","title":"ChannelGroup","text":"<p>This component renders a given list of <code>Chat</code> channels in a <code>Column</code>, each chat in its own ChannelRow, with the <code>Chat.displayName</code> as the title and the subtitle showing a preview of the members with in it. This is utilized in the UserDetailsView to show channels the current user has in common with any other user.</p> <pre><code>ChannelGroup(\n    channels = listOf(yourChannels),\n)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#channelrow","title":"ChannelRow","text":"<p>Renders a description of a <code>Chat</code> channel in a row format.</p> <p>This is utilized in the ChannelGroup within UserDetailsView to show channels the current user has in common with any other user.</p> <p>There are a few overload methods for this component dependent on your usage and level of customization needs.</p> <pre><code>ChannelRow(chat = channel)\nCHannelRow(chat = channel, showMemberPreview = true)\nChannelRow(\n    imageUrls = listOf(userImages),\n    title = \"My Favorite Channel\",\n    onClick = { }\n)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#chatinput","title":"ChatInput","text":"<p>Text input that handles the sending of messages to a given Chat when the send button is pressed.  This is generally used for MessageList as there is handling for an attachment sheet that will present from the callback <code>onMedia</code>.</p> <pre><code>ChatInput(chat = chat, onMedia = {})\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#chatlist","title":"ChatList","text":"<p>Renders a given list of <code>Chat</code> in an infinite scrolling list. Each chat will render a preview of it using ChatMessagePreview.</p> <pre><code>ChatList(\n    header = { Header() },\n    onChatClicked = { }\n)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#chatmessage","title":"ChatMessage","text":"<p>Renders the contents of a given Message from a <code>Chat</code>. </p> <p>This is used by MessageList to form the contents of a conversational chat, by properly aligning messages to left or right depending on sender (left aligned for incoming and right aligned for outgoing).</p> <p>There are a few overload methods for this component dependent on your usage and level of customization needs.</p> <pre><code>ChatMessage(message = message, onLongPress = { })\nChatMessage(message = message, onLongPress = { }, onClick = { })\nChatMessage(message = message, onLongPress = { }, shape = RoundedCornerShape(20.dp))\nChatMessage(message = message, onLongPress = { }, showAvatar = true, showTimestamp = false)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#chatmessagepreview","title":"ChatMessagePreview","text":"<p>Renders a \"preview\" for a given chat. This is based on the last message, if any, that was either sent or received in the chat. Attachments will be rendered as well. This is utilized in ChatList to show previews for all chats that a user is currently a member of.</p> <pre><code>ChatMessagePreview(chat = chat, onClick = {})\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#header","title":"Header","text":"<p>A top bar that can be utilized together with a content view to create a screen.</p> <p>There are a few overload methods for this component dependent on your usage and level of customization needs.</p> <pre><code>Header()\nHeader(onBackClicked = { })\nHeader(title = \"Create a Channel\", onBackClicked = { })\nHeader(title = \"Edit Profile\", endAction = { HeaderDefaults.SaveAction { } })\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#mediaactionsheet","title":"MediaActionSheet","text":"<p>A modal bottom sheet that displays attachments that can be sent in a chat. This is a top level scaffold that is designed to wrap your screen content.</p> <pre><code>val mediaSheetState = rememberMediaActionSheetState(chat = chat)\nMediaActionSheet(state) { \n    // your screen content\n}\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#messageactionsheet","title":"MessageActionSheet","text":"<p>A modal bottom sheet that allows contextual actions for a given messaged. This is a top level scaffold that is designed to wrap your screen content. This can be utilized in conjunction with MessageList to show contextual actions for the <code>MessageList#onLongPress</code> callback.</p> <pre><code>val messageSheetState = rememberMessageActionSheetState()\nMessageActionSheet(state) { \n    // your screen content\n}\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#messagelist","title":"MessageList","text":"<p>A conversational component displaying the messages for a given [Chat] in an infinite scrolling list.</p> <pre><code>MessageList(chat = chat, header = { Header() }, onPressUser = {}, onLongPress = {})\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#spinner","title":"Spinner","text":"<p>Themed spinner, colored with <code>ai.botstacks.sdk.ui.theme.Colors.primary</code>.</p> <pre><code>Spinner()\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#userprofile","title":"UserProfile","text":"<p>Renders an Avatar and the display name for a given User in a centered Column.</p> <pre><code>UserProfile(user)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/components/#userselect","title":"UserSelect","text":"<p>A component that renders User's in a horizontally scrolling Row. </p> <p>This is primarily used in CreateChannelView for showing currently selected Users and allowing the ability to add more if desired.</p> <pre><code>UserSelect(selectedUsers = userList, onAdd = {})\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/compose-getting-started/","title":"Setup","text":""},{"location":"compose/compose-getting-started/#environment-setup","title":"Environment Setup","text":"<p>Our Chat SDK uses Moko Resources to include the internal assets in the SDK for iOS.</p> <p>Since iOS doesn't bundle resources for static frameworks, we have to add the Moko resource plugin and setup the environment properly for inclusion.</p>"},{"location":"compose/compose-getting-started/#step-1-update-gradle","title":"Step 1: Update Gradle","text":"<pre><code>build.gradle.kts\n\nbuildscript {\n    dependencies {\n        // required for now to include resources from Chat SDK\n+       classpath(libs.moko.resources.generator)\n    }\n}\n</code></pre> <pre><code>shared/build.gradle.kts\n\nplugins {\n    // required for now to include resources from Chat SDK\n+   id(\"dev.icerock.mobile.multiplatform-resources\")\n}\n\nkotlin {\n    [...]\n    sourceSets {\n        [...]\n+       val iosX64Main by getting\n+       val iosArm64Main by getting\n+       val iosSimulatorArm64Main by getting\n\n        iosMain {\n+           dependsOn(commonMain.get())\n+           iosX64Main.dependsOn(this)\n+           iosArm64Main.dependsOn(this)\n+           iosSimulatorArm64Main.dependsOn(this)\n            dependencies {\n                // required for now to include resources from Chat SDK\n+               implementation(libs.moko.resources)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"compose/compose-getting-started/#step-2-add-build-phase-to-xcode","title":"Step 2: Add Build Phase to XCode","text":"<p>Per the documentation from Moko here we need to add a Run Script Build Phase, with the following script:</p> <pre><code>cd \"$SRCROOT/..\"\n\n./gradlew :shared:copyFrameworkResourcesToApp \\\n    -Pmoko.resources.BUILT_PRODUCTS_DIR=\"$BUILT_PRODUCTS_DIR\" \\\n    -Pmoko.resources.CONTENTS_FOLDER_PATH=\"$CONTENTS_FOLDER_PATH\" \\\n    -Pkotlin.native.cocoapods.platform=\"$PLATFORM_NAME\" \\\n    -Pkotlin.native.cocoapods.archs=\"$ARCHS\" \\\n    -Pkotlin.native.cocoapods.configuration=\"$CONFIGURATION\"\n</code></pre> <p>Be sure to update <code>shared</code> with the name of your shared module. The Multiplatform Wizard usually uses <code>shared</code> or <code>composeApp</code>.</p>"},{"location":"compose/compose-getting-started/#step-3-setup-cocoapods","title":"Step 3: Setup Cocoapods","text":"<p>Add a podfile with GoogleMaps and Giphy:</p> <pre><code>target 'iosApp' do\n#   use_frameworks!\n  platform :ios, '15.0'\n\n+ pod 'GoogleMaps', '8.4.0'\n+ pod 'Giphy', '2.2.8'\nend\n</code></pre> <p>Setup cocoapods in gradle:</p> <pre><code>plugins {\n+   kotlin(\"native.cocoapods\")\n}\n</code></pre> <pre><code>kotlin {\n    [...]\n    cocoapods {\n        name = \"shared\"\n        version = \"1.0\"\n        homepage = \"https://botstacks.ai\"\n        summary = \"Some cool story\"\n        ios.deploymentTarget = \"15.0\"\n\n        podfile = file(\"../iosApp/Podfile\")\n\n        framework {\n            baseName = \"shared\"\n            isStatic = true\n        }\n\n        pod(\"Giphy\") {\n            moduleName = \"GiphyUISDK\"\n            version = \"2.2.8\"\n            extraOpts += listOf(\"-compiler-option\", \"-fmodules\")\n        }\n\n        pod(\"GoogleMaps\") {\n            version = \"8.4.0\"\n            extraOpts += listOf(\"-compiler-option\", \"-fmodules\")\n        }\n    }\n}\n</code></pre>"},{"location":"compose/compose-getting-started/#quick-start","title":"Quick Start","text":"<p>In order to display any of the UI components and access chat data, you must first initialize the SDK and log in as a chat user.</p>"},{"location":"compose/compose-getting-started/#step-1-initialize-the-sdk","title":"Step 1: Initialize the SDK","text":"<p>In each platform (android/ios), call BotStacksChat.shared.setup with your API key. You can obtain your API key from the Botstacks Dashboard. If you don\u2019t yet have one, you can create one for FREE!</p>"},{"location":"compose/compose-getting-started/#android","title":"Android","text":"<pre><code>main.android.kt\n\n@Composable\nfun MainView() {\n    BotStacksChat.shared.setup(\n        context = LocalContext.current,\n        apiKey = stringResource(R.string.botstacks_api_key),\n    )\n\n    App()\n}\n</code></pre>"},{"location":"compose/compose-getting-started/#ios","title":"iOS","text":"<pre><code>main.ios.kt\n\nfun MainViewController() = ComposeUIViewController(\n    configure = {\n        onFocusBehavior = OnFocusBehavior.DoNothing\n    }\n) {\n    val apiKey = readPlist&lt;String&gt;(\"AppSecrets\", \"BOTSTACKS_API_KEY\") ?: throw IllegalArgumentException(\"BotStacks API Key not provided\")\n\n    BotStacksChat.shared.setup(\n        apiKey = apiKey,\n    )\n\n    App()\n}\n</code></pre> <pre><code>App.kt\n\n@Composable\nfun App() {\n    BotStacksThemeEngine {\n        AppNavigation()\n    }\n}\n</code></pre> <p>Note, you can optionally delay load and later call <code>BotStacksChat.shared.load</code> to load BotStacks in whatever load sequence you wish.</p> <p>If you'd like Giphy support in your chats, send your Giphy API key during <code>setup</code>.</p>"},{"location":"compose/compose-getting-started/#step-2-logging-in","title":"Step 2: Logging in","text":"<p>Nearly all functionality is within the context of a chat user. That said, you must first be logged in as a chat user in order to appropriately display the UI components.</p> <p>To log in, call the login function prior to displaying any UI components. Below is an example of How to accomplish this.</p> <pre><code>val composeScope = rememberCoroutineScope()\ncomposeScope.launch {\n    BotStacksChat.shared.login(\n        \"user-identifier\",\n        \"username\"\n    ) // optionally pass displayName and picture\n    if (BotStacksChat.shared.isUserLoggedIn) {\n        // handle logged in state change\n    }\n}\n</code></pre>"},{"location":"compose/compose-getting-started/#step-3-render-the-ui","title":"Step 3: Render the UI","text":"<p>The BotStacks UI Kit uses Jetpack Compose (Multiplatform). There are a plethora of navigation protocols for Compose Multiplatform, so pick whatever one works best for your app.</p> <p>Our Sample uses Voyager, so we simply make a screen for the controller, drop it in and navigate to it. Our sample makes use of a commonized approach to give iOS and Android both platform specific bottom sheet implementations to keep apps respective of the platform they are on.</p> <pre><code>data class ChatScreen: Screen {\n    override val key = uniqueScreenKey\n\n    @Composable\n    override fun Content() {\n        val navigator = LocalPlatformNavigator.current\n +      BotStacksChatController { navigator.replaceAll(LoginScreen) }\n    }\n}\n</code></pre>"},{"location":"compose/compose-getting-started/#theming","title":"\ud83d\udd8d Theming","text":"<p>You can theme your BotStacks UI kit by modifying the defaults of the <code>BotStacksThemeEngine</code>. The theme supports fonts, colors, assets, and dimensions. Configure it like this:</p> <pre><code>BotStacksThemeEngine(\n    // true or false to force theming one way (default follows system)\n    useDarkTheme = isSystemInDarkTheme(),\n    // color scheme for light mode\n    lightColorScheme = lightBotStacksColors(\n        primary = Purple40,\n        onPrimary = Color.White,\n    ),\n    // color scheme for dark mode\n    darkColorScheme = darkBotStacksColors(\n        primary = Purple80,\n        onPrimary = Color.Black\n    ),\n    // fonts to utilize for Text within components\n    fonts = with(Typography.bodyLarge) {\n        botstacksFonts(\n            body1 = FontStyle(\n                size = fontSize,\n            )\n        )\n    },\n    // assets for empty state and logo (in header)\n    assets = Assets(\n        logo = R.drawable.inappchat_icon,\n        emptyChat = EmptyScreenConfig.Messages(\n            caption = \"No messages yet.\"\n        )\n    ),\n    // shape definitions for components\n    shapes = ShapeDefinitions(\n        small = 4.dp,\n        medium = 10.dp,\n        large = 16.dp\n    )\n) {\n    // content code here (components, Controller)\n}\n</code></pre>"},{"location":"compose/compose-getting-started/#components-views","title":"Components &amp; Views","text":"<p>We also support direct component usage in your existing applications. Check out or components and views documentation for integrating them.</p>"},{"location":"compose/views/","title":"Android Screen Content Views","text":"<p>Our SDK at BotStacks includes convenience screen content views, which are essentially a couple of components working together under the hood for you generally using a <code>State</code>.</p> <p>The views rely on a <code>State</code> object for driving UI and handling asynchronous updates for saving, creating, and updating. The <code>state</code> will be a required parameter on each View.</p> <p>They generally can be used for the entire contents on a \"screen\" and are drop in capable.</p> <p>Outlined below are the content views currently available and examples on how to use them.</p> <ul> <li>ChannelSettingsView</li> <li>CreateChannelView</li> <li>EditProfileView</li> <li>SelectChannelUsersView</li> <li>UserDetailsView</li> </ul>"},{"location":"compose/views/#channelsettingsview","title":"ChannelSettingsView","text":"<p>A screen content view for displaying settings and details for a given Chat channel. This relies on the <code>ChannelSettingsState</code>.</p> <p>To persist changes to the channel settings, call <code>state.update()</code>.</p> <pre><code>val state = remember(chat) { ChannelSettingsState(chat) }\nChannelSettingsView(state)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/views/#createchannelview","title":"CreateChannelView","text":"<p>A screen content view for creating a new Channel. This has a callback to trigger navigation to selecting users for the channel. The UI for this screen can be found in SelectChannelUsersView.</p> <p>To create the channel, call <code>state.create()</code>.</p> <pre><code>val state = remember { CreateChannelState() }\nCreateChannelView(state) {\n    // go to pick users\n}\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/views/#editprofileview","title":"EditProfileView","text":"<p>A screen content view for editing the current user.</p> <p>To trigger an update once modifications are done within the view, simply call <code>state.update()</code>.</p> <pre><code>val state = remember { EditProfileState() }\nEditProfileView(state)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/views/#selectchannelusersview","title":"SelectChannelUsersView","text":"<p>This is used in coordination with either a CreateChannelView or a ChannelSettingsView to set or update the users in a given channel.</p> <pre><code>val state = remember(chat) { ChannelUserSelectionState(chat) }\nSelectChannelUsersView(state = state)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"},{"location":"compose/views/#userdetailsview","title":"UserDetailsView","text":"<pre><code>val state = remember(user) { UserDetailsState(user) }\nUserDetailsView(state = state)\n</code></pre> <p>For a more detailed API definition, check out the API docs here.</p>"}]}